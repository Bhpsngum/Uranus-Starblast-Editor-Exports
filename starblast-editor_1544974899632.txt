rotateAroundZ = (name, oname, a, rotatePart, isWing=false) ->
  o = model.bodies[oname];
  
  if(isWing)
    part = model.wings[name];
  else
    part = model.bodies[name];
  
  ox = o.offset.x;
  oy = o.offset.y;
  
  dx = part.offset.x-ox;
  dy = part.offset.y-oy;
  
  ra = -a*0.0174533;
  
  ndx = dx*Math.cos(ra) - dy*Math.sin(ra);
  ndy = dx*Math.sin(ra) + dy*Math.cos(ra);
  
  part.offset.x = ndx+ox;
  part.offset.y = ndy+oy;
  
  if(rotatePart&&!isWing)
    part.angle+=a
  
anchorToPart = (name, oname, xx, yy, zz, isWing=false, oisWing) ->
    if(oisWing)
      o = model.wings[oname];
    else
      o = model.bodies[oname];
    
    if(isWing)
      part = model.wings[name];
    else
      part = model.bodies[name];
      
    part.offset.x = o.offset.x+xx;
    part.offset.y = o.offset.y+yy;
    part.offset.z = o.offset.z+zz;
  

multiplyArrays = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]*m[i])
  return k;

addArrays = (arr, m, mult=1) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]+m[i]*mult)
  return k;
  
multiplyArray = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]*m)
  return k;

addArray = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]+m)
  return k;

circle = (id, xx, yy, zz, segments, radPosY, radPosZ, tx, h=1) ->
  widths = [];
  heights = [];
  posx = [];
  m = model;
  for i in [0..radPosY.length]
    posx.push(0);
    heights.push(h);
    widths.push(radPosY[i]*Math.tan(Math.PI/segments))
  for i in [0..segments] by 1
    m.bodies[id+"segment"+i] = 
      section_segments: 4
      offset:
        x: xx
        y: yy
        z: zz
      position:
        x: posx
        y: radPosY
        z: radPosZ
      width: widths
      height: heights
      angle: 360*(i/segments)
      texture: tx
  
wingFixedBumps = (xx, yy, zz, lengths, widths, angles, positions, tx, bumpPos, bumpS, toler) ->
  anew = [];
  l = [];
  w = [];
  p = [];
  for i in [0..angles.length-1]
    anew.push(angles[i])
    l.push(lengths[i])
    w.push(widths[i])
    p.push(positions[i])
    if(i==angles.length-1)
      break;
    if(Math.abs(angles[i]-angles[i+1])>toler)
      anew.push(angles[i])
      l.push(0)
      w.push(widths[i+1])
      p.push(positions[i+1])
  
  l.unshift(0)
  w.unshift(0)
  p.unshift(positions[0])
  anew.unshift(anew[0])
  
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  
  l.push(0)
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  anew.push(anew[anew.length-1])
  
  return k = 
    doubleside: true
    offset:
      x: xx
      y: yy
      z: zz
    length: l
    width: w
    angle: anew
    position: p
    texture: tx
    bump:
      position: bumpPos
      size: bumpS

squareBody = (id, xx, yy, zz, w, h, posx, posy, posz, txtop, txsides, txbottom, bump, a=0, sbumpMult=1, doubleSides=false) ->
  flatw = [];
  flath = [];
  for i in [0..w.length]
    flatw.push(bump*sbumpMult)
    flath.push(bump)
  
  xoff = 0.01
  if(a!=0) 
    xoff = 0
  
  sides = 
    section_segments: 4
    offset:
      x: xx+xoff
      y: yy
      z: zz
    position:
      x: addArrays(posx,w,1)
      y: posy
      z: posz
    width: flatw
    height: h
    texture: txsides
    angle: a
  top = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h)
    width: w
    height: flath
    texture: txtop
    angle: a
  bottom = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h,-1)
    width: w
    height: flath
    texture: txbottom
    angle: a
  if(doubleSides)
    dsides = 
      section_segments: 4
      offset:
        x: xx+xoff
        y: yy
        z: zz
      position:
        x: multiplyArray(addArrays(posx,w,-1), 1)
        y: posy
        z: posz
      width: flatw
      height: h
      texture: txsides
      angle: a
    model.bodies[id+"dsides"] = dsides;
    
  model.bodies[id+"t"] = top;
  model.bodies[id+"b"] = bottom;
  model.bodies[id+"sides"] = sides;
  
generateBall = (xx, yy, zz, length, radius, segments, l_segments, tx, vertical) ->
  xzpos = []
  ypos = []
  width = []
  for i in [0..segments]
    ang = (i/segments)*Math.PI
    width.push(Math.sin(ang)*radius)
    ypos.push(-Math.cos(ang)*length)
    xzpos.push(0)
    
  return k = 
    section_segments: l_segments
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: xzpos
      y: ypos
      z: xzpos
    width: width
    height: width
    texture: tx
    vertical: vertical
  
bodyStarY = (name, number, aroundX, aroundY) ->
  b = model.bodies[name]
  
  for i in [1..number-1] by 1
    n = name+"star"+i
    nposx = [];
    nposz = [];
    
    ang = (i*360/number)
    ang = ang*0.0174533

    for j in [0..b.position.x.length-1] by 1
      if(j>=b.position.z.length)
        break;
      ox = b.position.x[j]
      oz = b.position.z[j]
      nposx.push(ox*Math.cos(ang)-oz*Math.sin(ang))
      nposz.push(ox*Math.sin(ang)+oz*Math.cos(ang))
    
    ox = b.offset.x-aroundX
    oz = b.offset.z-aroundY
    
    model.bodies[n] =
      section_segments: b.section_segments
      offset:
        x: ox*Math.cos(ang)-oz*Math.sin(ang)+aroundX
        y: b.offset.y
        z: ox*Math.sin(ang)+oz*Math.cos(ang)+aroundY
      position:
        x: nposx
        y: b.position.y.slice(0)
        z: nposz
      width: b.width.slice(0)
      height: b.height.slice(0)
      texture: b.texture.slice(0)
      angle: 0
      propeller: b.propeller
      vertical: b.vertical
  
bodyStar = (name, number) ->
  b = model.bodies[name]
  for i in [1..number-1] by 1
    n = name+"star"+i
    model.bodies[n] =
      section_segments: b.section_segments
      offset:
        x: b.offset.x
        y: b.offset.y
        z: b.offset.z
      position:
        x: b.position.x.slice(0)
        y: b.position.y.slice(0)
        z: b.position.z.slice(0)
      width: b.width.slice(0)
      height: b.height.slice(0)
      texture: b.texture.slice(0)
      angle: b.angle+(i*360/number)
      
capacitor = (xx, yy, zz) ->
  return k =
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-10,-5,5,10]
      z: [-5,0,2,-1]
    width: [0,3,3,0]
    height: [0,1,1,0]
    texture: [18,17,18]
    angle: -70
    
mapToRange = (v, min, max) ->
  if(v<min)
    return 0
  if(v>max)
    return 1
  return (v-min)/(max-min)

model =
  name: 'GA Linker'
  level: 6
  model: 15
  size: 1.2
  specs:
    shield:
      capacity: [200,100]
      reload: [2,3]
    generator:
      capacity: [150,60]
      reload: [15,15]
    ship:
      mass: 100
      speed: [150,145]
      rotation: [40,130]
      acceleration: [70,120]
  bodies:
    main:
      section_segments: 6
      offset:
        x: 0
        y: -20
        z: 4
      position:
        x: [0,0,0,0,0,0,0]
        y: [-53,-53,-50,-20,35,40,40]
        z: [0,0,0,0,0,0,0]
      width: [0,4,10,20,20,15,0]
      height: [0,3,6,8,8,8,0]
      texture: [3,3,11,0.9]
    cockpit:
      section_segments: 6
      angle: 0
      offset:
        x: 0
        y: -25
        z: 10
      position:
        x: [0,0,0,0,0,0,0]
        y: [-27,-25,-20,-10,0,12,15]
        z: [0,0,0,0,0,0,0]
      width: [0,6,10,12,12,12,0]
      height: [0,3,4,5,5,4,0]
      texture: [7,7,9,9,12,4]
    mainBottom:
      section_segments: 6
      offset:
        x: 0
        y: -20
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0,0,0]
        y: [-63,-63,-50,-30,-20,15,40,70,80,70]
        z: [0,0,0,0,0,0,0,0,0,0]
      width: [0,4,13,20,30,30,20,12,7,0]
      height: [0,3,6,6,6,6,6,6,6,0]
      texture: [12,18,15,3.9,3.9,3.9,18,3.9,17]
      propeller: true
    gunBody:
      section_segments: 6
      angle: 0
      offset:
        x: 0
        y: -55
        z: -4
      position:
        x: [0,0,0,0,0,0,0]
        y: [-30,-29,-12,12,25]
        z: [0,0,0,6]
      width: [0,9,14,14,14]
      height: [0,6,8,8,8]
      texture: [1.9,1.9,1.9,4]
    gun:
      section_segments: 6
      angle: 0
      offset:
        x: 0
        y: -55
        z: -4
      position:
        x: addArray([0,0,0,0,0,0,0],-4)
        y: [-60,-70,-25]
        z: [0,0,0,0,0]
      width: [0,2,4]
      height: [0,2,4]
      texture: [16.9,2]
      laser:
        damage: [40,5]
        rate: 3
        type: 1
        speed: [60,120]
        number: 1
        angle: 0
        error: 0
    gunFrontPart1:
      section_segments: 6
      offset:
        x: 0
        y: -85
        z: -3
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-8,-8,2,2,7,7]
        z: [0,0,0,3,3,3,0,0,0]
      width: [0,10,10,10,10,0]
      height: [0,5,5,2,2,0]
      texture: [0.8,10.1,3.8] 
      angle: -90
    
    back:
      section_segments: 6
      offset:
        x: 0
        y: 40
        z: 0
      position:
        x: [0,0,0,0]
        y: [-10,-10,10,11]
        z: [0,0,0,0]
      width: [0,18,12,0]
      height: [0,7.5,7.5,0]
      texture: [1,1,3.9]
    enginesBackSide:
      section_segments: 6
      angle: 0
      offset:
        x: 15
        y: 30
        z: -8
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-25,-25,-22,0,5,25,30,20]
        z: [0,0,0,0,0,0,0,0]
      width: [0,6,11,11,8,8,6,0]
      height: [0,6,11,11,8,8,6,0]
      texture: [63,63,3.9,0.9,15,63,17]
      propeller: true
    enginesSides:
      section_segments: 6
      angle: 0
      offset:
        x: 46
        y: 22
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-35,-35,-32,0,5,25,30,20]
        z: [0,0,0,0,0,0,0,0]
      width: [0,6,11,11,8,8,6,0]
      height: [0,6,11,11,8,8,6,0]
      texture: [63,63,3.9,0.9,15,63,17]
      propeller: true
    flowFrontWinglets:
      section_segments: 8
      angle: 5
      offset:
        x: 12
        y: -50
        z: 0
      position:
        x: [-9,-9,0,-1,-1]
        y: [-20,-20,0,15,15]
        z: [0,0,0,0,0]
      width: [0,10,10,10,0]
      height: [0,3,3,3,0]
      texture: [63]
    engineSidesTubes:
      section_segments: 6
      offset:
        x: 57
        y: 6
        z: 0
      position:
        x: [-5,-5,1,1,-5,-5]
        y: [-15,-15,-10,10,15,15]
        z: [0,0,0,0,0,0]
      width: [0,2.5,2.5,2.5,2.5,0]
      height: [0,2.5,2.5,2.5,2.5,0]
      texture: [63]
    bottomFront:
      section_segments: 6
      offset:
        x: 0
        y: -20
        z: -5
      position:
        x: [0,0,0,0,0,0,0]
        y: [-53,-53,-50,-20,25,40,40]
        z: [0,0,0,-2,-5,0,0]
      width: [0,4,10,20,20,10,0]
      height: [0,3,6,8,8,5,0]
      texture: [2.9]
      
    wings:
      section_segments: 6
      offset:
        x: 20
        y: 0
        z: -5
      position:
        x: [10,10,-10,-10,0,0,0,0]
        y: [-10,6,10,25,30]
        z: [0,0,0,10,10,0,0,0,0]
      width: [40,40,30,15,0]
      height: [8,8,8,4,0]
      texture: [4,63,4] 
      angle: 90
      
    cap1: capacitor(8,-7,10)
    cap2: capacitor(8,0,10)
    cap3: capacitor(8,7,10)
      
    backReactor:
      section_segments: 8
      offset:
        x: 0
        y: 0
        z: -30
      position:
        x: [0,0,0,0,0,0,0,0,0,0]
        y: [-10,2,12,14,12,12,14,15,30]
        z: [0,0,0,0,0,0,0,0,0,0,0]
      width: [0,17,17,16,12,5,5,2,1]
      height: [0,17,17,16,12,5,5,2,1]
      texture: [1,1,8,18,17,13,18,4] 
      vertical: true
    reactorBall: generateBall(0, 30, -30, 5, 5, 6, 12, [4,17,18,17,18,17,18,17], true)
    reactorBallHolders:
      section_segments: 4
      offset:
        x: 0
        y: 30
        z: 15
      position:
        x: [0,0,0,0,0,0,0,0,0]
        y: [0,10,12,15,16]
        z: [5,0,-2,-3,-3,0,0,0,0,0]
      width: [1,2,4,4,0]
      height: [1,1,2,2,0]
      texture: [4,63,4] 
      angle: 45
    reactorSideArms:
      section_segments: 6
      offset:
        x: 0
        y: 8
        z: -12
      position:
        x: [0,0,0,0,0,0,0,0,0]
        y: [0,2,5,6,15,17,20]
        z: [-5,-3,-1,1,8,8,8,0,0,0]
      width: [0,4,4,1,1,2,0]
      height: [0,4,4,1,1,2,0]
      texture: [4,18,4,3,17] 
      vertical: true
      propeller: false
      angle: 0
      

squareBody("bottom", 0, -55, -10, 
[2,10,10,15,15,7], [2,5,5,7,7,2], 
[0,0,0,0,0,0,0,0], [-25,20,40,50,80,100], [10,0,0,0,0,10], 
[1], [1], [1], 2, 0, 1, true)

squareBody("cockpit", 0, -65, 10, 
[2,4,7,7,7,5], [2,3,5,5,4,3], 
[0,0,0,0,0,0,0,0], [-5,5,20,40,50,60], [-7,-1,0,0,0,-6], 
[4,9,9,9,18], [4,9,4], [9], 1, 0, 1, true)
bodyStar("reactorBallHolders",4)
bodyStarY("reactorSideArms",6,0,-30)

offy = 0;
for k,v of model.bodies 
  v.offset.y += offy;
    
for k,v of model.wings 
  v.offset.y += offy;
  
return model;