anim = 1;

rotateAroundZ = (name, oname, a, rotatePart, isWing=false) ->
  o = model.bodies[oname];
  
  if(isWing)
    part = model.wings[name];
  else
    part = model.bodies[name];
    
  ox = o.offset.x;
  oy = o.offset.y;
  
  dx = part.offset.x-ox;
  dy = part.offset.y-oy;
  
  ra = -a*0.0174533;
  
  ndx = dx*Math.cos(ra) - dy*Math.sin(ra);
  ndy = dx*Math.sin(ra) + dy*Math.cos(ra);
  
  part.offset.x = ndx+ox;
  part.offset.y = ndy+oy;
  
  if(rotatePart&&!isWing)
    part.angle+=a
    
anchorToPart = (name, oname, xx, yy, zz, isWing=false, oisWing) ->
    if(oisWing)
      o = model.wings[oname];
    else
      o = model.bodies[oname];
    
    if(isWing)
      part = model.wings[name];
    else
      part = model.bodies[name];
      
    part.offset.x = o.offset.x+xx;
    part.offset.y = o.offset.y+yy;
    part.offset.z = o.offset.z+zz;
  

multiplyArrays = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]*m[i])
  return k;

addArrays = (arr, m, mult=1) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]+m[i]*mult)
  return k;
  
multiplyArray = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]*m)
  return k;

addArray = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]+m)
  return k;

circle = (id, xx, yy, zz, segments, radPosY, radPosZ, tx, h=1) ->
  widths = [];
  heights = [];
  posx = [];
  m = model;
  for i in [0..radPosY.length]
    posx.push(0);
    heights.push(h);
    widths.push(radPosY[i]*Math.tan(Math.PI/segments))
  for i in [0..segments] by 1
    m.bodies[id+"segment"+i] = 
      section_segments: 4
      offset:
        x: xx
        y: yy
        z: zz
      position:
        x: posx
        y: radPosY
        z: radPosZ
      width: widths
      height: heights
      angle: 360*(i/segments)
      texture: tx
  
wingFixedBumps = (xx, yy, zz, lengths, widths, angles, positions, tx, bumpPos, bumpS, toler) ->
  anew = [];
  l = [];
  w = [];
  p = [];
  for i in [0..angles.length-1]
    anew.push(angles[i])
    l.push(lengths[i])
    w.push(widths[i])
    p.push(positions[i])
    if(i==angles.length-1)
      break;
    if(Math.abs(angles[i]-angles[i+1])>toler)
      anew.push(angles[i])
      l.push(0)
      w.push(widths[i+1])
      p.push(positions[i+1])
  
  l.unshift(0)
  w.unshift(0)
  p.unshift(positions[0])
  anew.unshift(anew[0])
  
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  
  l.push(0)
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  anew.push(anew[anew.length-1])
  
  return k = 
    doubleside: true
    offset:
      x: xx
      y: yy
      z: zz
    length: l
    width: w
    angle: anew
    position: p
    texture: tx
    bump:
      position: bumpPos
      size: bumpS

squareBody = (id, xx, yy, zz, w, h, posx, posy, posz, txtop, txsides, txbottom, bump, a=0, sbumpMult=1, doubleSides=false) ->
  flatw = [];
  flath = [];
  for i in [0..w.length]
    flatw.push(bump*sbumpMult)
    flath.push(bump)
  
  xoff = 0.01
  if(a!=0) 
    xoff = 0
  
  sides = 
    section_segments: 4
    offset:
      x: xx+xoff
      y: yy
      z: zz
    position:
      x: addArrays(posx,w,1)
      y: posy
      z: posz
    width: flatw
    height: h
    texture: txsides
    angle: a
  top = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h)
    width: w
    height: flath
    texture: txtop
    angle: a
  bottom = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h,-1)
    width: w
    height: flath
    texture: txbottom
    angle: a
  if(doubleSides)
    dsides = 
      section_segments: 4
      offset:
        x: xx+xoff
        y: yy
        z: zz
      position:
        x: multiplyArray(addArrays(posx,w,-1), 1)
        y: posy
        z: posz
      width: flatw
      height: h
      texture: txsides
      angle: a
    model.bodies[id+"dsides"] = dsides;
    
  model.bodies[id+"t"] = top;
  model.bodies[id+"b"] = bottom;
  model.bodies[id+"sides"] = sides;
  
bodyStarY = (name, number, aroundX, aroundY,mult = 1) ->
  b = model.bodies[name]
  
  for i in [1..(number-1)*mult] by 1
    n = name+"star"+i
    nposx = [];
    nposz = [];
    
    ang = (i*360/number)
    ang = ang*0.0174533

    for j in [0..b.position.x.length-1] by 1
      if(j>=b.position.z.length)
        break;
      ox = b.position.x[j]
      oz = b.position.z[j]
      nposx.push(ox*Math.cos(ang)-oz*Math.sin(ang))
      nposz.push(ox*Math.sin(ang)+oz*Math.cos(ang))
    
    ox = b.offset.x-aroundX
    oz = b.offset.z-aroundY
    
    model.bodies[n] =
      section_segments: b.section_segments
      offset:
        x: ox*Math.cos(ang)-oz*Math.sin(ang)+aroundX
        y: b.offset.y
        z: ox*Math.sin(ang)+oz*Math.cos(ang)+aroundY
      position:
        x: nposx
        y: b.position.y.slice(0)
        z: nposz
      width: b.width.slice(0)
      height: b.height.slice(0)
      texture: b.texture.slice(0)
      angle: 0
      propeller: b.propeller
      vertical: b.vertical
  
bodyStar = (name, number) ->
  b = model.bodies[name]
  for i in [1..number-1] by 1
    n = name+"star"+i
    model.bodies[n] =
      section_segments: b.section_segments
      offset:
        x: b.offset.x
        y: b.offset.y
        z: b.offset.z
      position:
        x: b.position.x.slice(0)
        y: b.position.y.slice(0)
        z: b.position.z.slice(0)
      width: b.width.slice(0)
      height: b.height.slice(0)
      texture: b.texture.slice(0)
      angle: b.angle+(i*360/number)
      vertical: b.vertical

glEx = 0
glRet = 1;
if(anim>0.98)
  glEx = 1;
  glRet = 0;
      
shieldPiece = (xx, yy, zz, t=1) ->
  return k =
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-10,-10,-5,-5,0,0,35]
      z: multiplyArray([0,0,2,2,4,4,60,0,0],t)
    width: [0,20,20,5,5,35,25]
    height: [0,5,5,3,3,3,0]
    texture: [3,3+14*glRet,3,4,3,63]
    angle: 0
    
mapToRange = (v, min, max) ->
  if(v<min)
    return 0
  if(v>max)
    return 1
  return (v-min)/(max-min)
 
duplicateBody = (name, newName) ->
  if(newName==undefined)
    newName = name+"duplicate"
  b = model.bodies[name]
  model.bodies[newName] =
    section_segments: b.section_segments
    offset:
      x: b.offset.x
      y: b.offset.y
      z: b.offset.z
    position:
      x: multiplyArray(b.position.x.slice(0),-1)
      y: b.position.y.slice(0)
      z: b.position.z.slice(0)
    width: b.width.slice(0)
    height: b.height.slice(0)
    texture: b.texture.slice(0)
  n = model.bodies[newName]
  if(b.angle!=undefined)
    n.angle = b.angle
  if(b.propeller!=undefined)
    n.propeller = b.propeller
  return n 
  
piramidChain = (xx, yy, zz, n, w=1, h=1, l=1, tx=1, a=0) ->
  width = [];
  height = [];
  length = [];
  width.push(0)
  height.push(0)
  p = 0;
  for i in [0..n]
    
    length.push(p)
    width.push(w)
    height.push(h)
    p+=l
    length.push(p)
    width.push(0)
    height.push(0)
  width.push(0)
  height.push(0)
  length.push(p)
  return k =
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: multiplyArray(length,0)
      y: length
      z: multiplyArray(length,0)
    width: width
    height: height
    texture: tx
    angle: a
  
pipeSide = (xx, yy, zz) ->
  return k =
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [-15,0,0,-15,0,0,0,0]
      y: [-15,-5,5,15]
      z: [0,0,0,0,0,0,0,0]
    width: [4,4,4,4]
    height: [4,4,4,4]
    texture: [63]
    angle: 0
    vertical: true
  
injector = (xx, yy, zz) ->
  return k =
    section_segments: 6
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-5,2,5,5,10,5]
      z: [0,0,0,0,0,0,0,0]
    width: [6,6,6,4,3,0]
    height: [4,4,4,3,2,0]
    texture: [1,63,63,13,17]
    angle: 0



exhaustAccelerator = (id, yy) ->
  model.bodies["exhAccSides"+id] =
    section_segments: 4
    offset:
      x: 33
      y: 0
      z: -yy
    position:
      x: [-10,-10,0,0,0,0,0,0,-10,-10,0,0]
      y: [-16,-15,-10,-5,-4,4,5,10,15,16]
      z: [0,0,0,0,0,0,0,0,0,0,0,0]
    width: [0,2,2,2,2,2,2,2,2,0]
    height: [0,10,10,10,6,6,10,10,10,0]
    texture: [3,3,18,3,17,3,18,3,3]
    vertical: true
  model.bodies["exhAccTop"+id] = 
    section_segments: 6
    offset:
      x: 1
      y: yy
      z: 14
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-1,10,12,25,26]
      z: [0,0,0,0,-3,0,0,0,0]
    width: [4,4,10,10,8]
    height: [2,2,3,3,0]
    texture: [18,63,3.8]
    angle: 90
  model.bodies["exhAccBottom"+id] = 
    section_segments: 6
    offset:
      x: 1
      y: yy
      z: -14
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-1,10,12,25,26]
      z: [0,0,0,0,3,0,0,0,0]
    width: [4,4,10,10,8]
    height: [2,2,3,3,0]
    texture: [18,63,3.8]
    angle: 90
    
propulsor = (top=true) ->
  t = if top then "top" else "bottom"
  tm = if top then 1 else -1
  model.bodies["propSides"+t] =
    section_segments: 6
    offset:
      x: 25
      y: 25
      z: 21*tm
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-30,-10,10,30]
      z: [-6*tm,0,0,-6*tm,0,0,0,0,0]
    width: [2,2,2,2]
    height: [0,10,10,0]
    texture: [3.8] 
  model.bodies["propTop"+t] =
    section_segments: 6
    offset:
      x: 0
      y: 25
      z: 30*tm
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-32,-10,10,10,5,15]
      z: [-15*tm,0,0,0,0,-15*tm,0,0,0]
    width: [30,30,30,0,30,30]
    height: [1,1,1,0,0,0]
    texture: [3.8] 
  for y in [0..1]
    for x in [0..5-y]
      model.bodies["prop"+x+""+y+t] = 
        section_segments: 6
        offset:
          x: 0+x*4+(if y then 2 else 0)
          y: 35+y*-5
          z: 21*tm+y*5*tm
        position:
          x: [0,0,0,0,0,0,0,0]
          y: [-10,5,10,5]
          z: [0,0,0,0,0,0,0,0,0]
        width: [4,4,2,0]
        height: [4,4,2,0]
        texture: [4,18,17] 
        propeller: true
        
manualMirror = (name, xoff, left=true) ->
  v = model.bodies[name]
  dupl = duplicateBody(name)
  xx = xoff
  if(left)
    xx *= -1
  v.position.x = addArray(v.position.x,xx)
  dupl.position.x = addArray(dupl.position.x,-xx)
###
"lasers":[
{"x":1.072,"y":-1.76,"z":0.048,"angle":0,"damage":[12,12],
"rate":6,"type":1,"speed":[50,50],"number":2,"spread":0,"error":0.5,"recoil":0},
{"x":-1.072,"y":-1.76,"z":0.048,"angle":0,"damage":[12,12],
"rate":6,"type":1,"speed":[50,50],"number":2,"spread":0,"error":0.5,"recoil":0}]
###

###'"specs":{"shield":{"capacity":[350,350],"reload":[2,2]},
"generator":{"capacity":[750,750],"reload":[30,30]},
"ship":{"mass":130,"speed":[150,150],"rotation":[70,70],"acceleration":[100,100]}},
###

lasers = 
  damage: [35,8]
  rate: 1.5
  type: 1
  speed: [110,180]
  number: 1
  error: 5
  recoil: 70

a = 0

model =
  name: 'D-Blast'
  level: 6
  model: 18
  size: 1.5
  specs:
    shield:
      capacity: [350,100]
      reload: [2,2]
    generator:
      capacity: [120,60]
      reload: [50,100]
    ship:
      mass: 150
      speed: [150,150]
      rotation: [30,60]
      acceleration: [40,100]
  bodies:
    c1:
      section_segments: 16
      offset:
        x: 0
        y: -15
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-2,-2,2,2]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,60,60,0]
      height: [0,60,60,0]
      texture: [3] 
      vertical: true
    c2:
      section_segments: 16
      offset:
        x: 0
        y: 15
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-2,-2,2,2]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,60,60,0]
      height: [0,60,60,0]
      texture: [3] 
      vertical: true
      
    cockpitBack:
      section_segments: 6
      offset:
        x: 1
        y: 5
        z: 25
      position:
        x: [5,5,0,0,0,0,0,0]
        y: [-1,10,24,24]
        z: [0,0,0,-5,0,0,0,0,0]
      width: [20,20,15,0]
      height: [10,10,10,0]
      texture: [4,3,4]
      angle: 90
    cockpitFront:
      section_segments: 8
      offset:
        x: 0
        y: -60
        z: 20
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [0,10,15,20]
        z: [-5,-1,1,0,0,0,0,0,0]
      width: [0,14,15,0]
      height: [0,5,6,0]
      texture: [1] 
    cockpitFrontFlat:
      section_segments: 6
      offset:
        x: 1
        y: -49
        z: 17
      position:
        x: [5,5,0,0,0,0,0,0]
        y: [-1,10,24,24]
        z: [0,0,0,-5,0,0,0,0,0]
      width: [8,8,7,0]
      height: [4,4,4,0]
      texture: [0.8]
      angle: 90
      
    sidesTop:
      section_segments: 3
      offset:
        x: 0
        y: 0
        z: 21
      position:
        x: [25,15,10,7,10,15,25]
        y: [-55,-40,-25,0,25,40,55]
        z: [-5,-2,0,0,0,-2,-5,0,0]
      width: [0,15,20,24,20,15,0]
      height: [0,6,10,10,10,6,0]
      texture: [63] 
    sidesTopDeco:
      section_segments: 3
      offset:
        x: 0
        y: 0
        z: 21
      position:
        x: multiplyArray([25,15,10,7,10,15,25],0.5)
        y: [-55,-40,-25,0,25,40,55]
        z: [-5,-2,0,0,0,-2,-5,0,0]
      width: multiplyArray([0,15,20,24,20,15,0],0.5)
      height: [0,6,10,10,10,6,0]
      texture: [3.5] 
    sidesBottom:
      section_segments: 3
      offset:
        x: 0
        y: 0
        z: -21
      position:
        x: [25,15,10,7,10,15,25]
        y: multiplyArray([-55,-40,-25,0,25,40,55],-1)
        z: multiplyArray([-5,-2,0,0,0,-2,-5,0,0],-1)
      width: [0,15,20,24,20,15,0]
      height: multiplyArray([0,6,10,10,10,6,0],-1)
      texture: [63] 
    sidesBottomDeco:
      section_segments: 3
      offset:
        x: 0
        y: 0
        z: -21
      position:
        x: multiplyArray([25,15,10,7,10,15,25],0.5)
        y: multiplyArray([-55,-40,-25,0,25,40,55],-1)
        z: multiplyArray([-5,-2,0,0,0,-2,-5,0,0],-1)
      width: multiplyArray([0,15,20,24,20,15,0],0.5)
      height: multiplyArray([0,6,10,10,10,6,0],-1)
      texture: [3.6] 
    
    tTop:
      section_segments: 6
      offset:
        x: 0.001
        y: 0
        z: 12
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [0,10,25,35,35]
        z: [0,0,0,0,0,0,0,0,0]
      width: [45,45,40,20,0]
      height: [5,5,5,5,0]
      texture: [0.8] 
      angle: 90
    tBottom:
      section_segments: 6
      offset:
        x: 0.001
        y: 0
        z: -12
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [0,10,25,35,35]
        z: [0,0,0,0,0,0,0,0,0]
      width: [45,45,40,20,0]
      height: [5,5,5,5,0]
      texture: [0.8] 
      angle: 90
    tMain:
      section_segments: 6
      offset:
        x: 20
        y: 0
        z: 0
      position:
        x: [0,0,-3,-10,0,0,0,0,0]
        y: [0,15,25,35]
        z: [0,0,0,0,0,0,0,0,0]
      width: [10,10,10,0]
      height: [15,15,15,15]
      texture: [0.8] 
      angle: 90
    tCannonM:
      section_segments: 8
      offset:
        x: 0
        y: -30
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-20,-40,0,0,20]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,4,5,6,7]
      height: [0,4,5,6,7]
      texture: [17,4,63,4] 
      angle: 0
      laser:
        lasers
    tCannonsSides:
      section_segments: 8
      offset:
        x: 13
        y: -30
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-20,-40,0,0,20]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,4,5,6,7]
      height: [0,4,5,6,7]
      texture: [17,4,63,4] 
      angle: 0
      laser:
        lasers
    tAntennae1:
      section_segments: 4
      offset:
        x: 0
        y: -45
        z: 2
      position:
        x: addArray([0,0,0,0,0,0,0,0],45)
        y: [-65,-60,-55,-50,10]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,2,2,1,1]
      height: [0,2,2,1,1]
      texture: [4,17,4] 
      angle: 0
    tAntennae2:
      section_segments: 4
      offset:
        x: 0
        y: -40
        z: -2
      position:
        x: addArray([0,0,0,0,0,0,0,0],42)
        y: [-80,-75,10]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,1,1]
      height: [0,1,1]
      texture: [4] 
      angle: 0
    tAntennaeBox:
      section_segments: 6
      offset:
        x: 0
        y: 0
        z: 0
      position:
        x: addArray([0,0,0,0,0,0,0,0],55)
        y: addArray([-15,-15,-10,-10,10,10,15,15],-20)
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,6,6,10,10,6,6,0]
      height: [0,4,4,6,6,4,4,0]
      texture: [3.8,13,3.8,18,3.8,13,3.8] 
      angle: 30
      
      
    reactor:
      section_segments: 12
      offset:
        x: 0
        y: -20
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0,0,0,0]
        y: [-27,-27,-25,-25,-27,-25,-17,-15,4]
        z: [0,0,0,0,0,0,0,0,0,0,0,0]
      width: [0,10,10,15,15,20,20,30,30]
      height: [0,10,10,15,15,20,20,30,30]
      texture: [18,4,17,4,4,4,8,4] 
      vertical: true
    reactorPipes:
      section_segments: 4
      offset:
        x: 25
        y: -50
        z: 0
      position:
        x: [-10,0,0,0,0,0,0,0]
        y: [5,10,20]
        z: [0,0,0,0,0,0,0,0,0]
      width: [4,4,4]
      height: [4,4,4]
      texture: [4] 
      vertical: true
    capacitorBottom:
      section_segments: 6
      offset:
        x: 0
        y: -42
        z: -20
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-15,-15,-10,-10,10,10,20]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,10,10,8,8,10,10]
      height: [0,7,7,5,5,7,7]
      texture: [3.8,3.8,3.8,17,3.8,3.8]
    capacitorsBottomSide:
      section_segments: 6
      offset:
        x: 15
        y: -40
        z: -20
      position:
        x: [-8,0,0,0,0,0,0,0]
        y: [-17,-15,-10,-10,10,10,50]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,10,10,8,8,10,10]
      height: [4,7,7,5,5,7,7]
      texture: [3.8,3.8,3.8,17,3.8,3.8]
      angle:0

###
bodyStarY("enginesSides",8,0,0)
bodyStarY("engineSidesGlow",8,0,0)
###
###bodyStarY("reactorStructuralTubeInner",8,0,0)
bodyStarY("reactorStructuralTubeOuter",8,0,0)

bodyStarY("reactorCapacitor",8,0,0,0.5)

bodyStar("reactorInjector",8)
bodyStar("reactorInjector2",8)
###

bodyStarY("reactorPipes",8,0,0,1)

propulsor(false)
propulsor(true)

manualMirror("sidesTop",50,true)
manualMirror("sidesTopDeco",36,true)
manualMirror("sidesBottom",50,true)
manualMirror("sidesBottomDeco",36,true)

squareBody("cockpit", 0, -50, 24, 
[8,10,10,10,10], [2,7,10,10,10], 
[0,0,0,0,0], [0,10,28,47,50], [-5,-3,0,0,0,0], 
[7,9,9,4], [7,9,3], [9], 1, 0, 5, true)

squareBody("cockpitBottom", 0, -50, 20, 
[25,27,28,28], [3,3,5,3], 
[0,0,0,0], [0,10,42,57], [-5,-2,0,-5,0,0], 
[1,10,3], [1], [1,1,3], 0, 0, 0, true)

squareBody("tSides", 30, -50, 0, 
[0,10,15,15,10,7], [12,12,12,12,12,12], 
[-5,5,2,2,0,-10,0], [-15,20,30,70,80,90], [0,0,0,0,0,0], 
[1], [1,1,10,1], [1], 0, 0, 1, true)
squareBody("tBack", 40, 0, 0, 
[10,10,5,0], [12,12,12,12], 
[0,0,0,-15], [0,20,30,40], [0,0,0,0,0,0], 
[1], [1], [1], 0, -90, 1, true)

for k,v of model.bodies
  if(k[0] == "t")
    ox = v.offset.x
    oy = v.offset.y
    ang = a*0.0174533
    if(ox!=0)
      dupl = duplicateBody(k)
      dupl.offset.x = 0
      dupl.offset.y = 0
      dupl.position.x = addArray(multiplyArray(v.position.x,-1),-ox)
      dupl.position.y = addArray(v.position.y,oy)
      dupl.angle *= -1
      dupl.angle += a
    v.offset.x = 0
    v.offset.y = 0
    v.position.x = addArray(v.position.x,ox)
    v.position.y = addArray(v.position.y,oy)
    v.angle += a

offy = 0;
for k,v of model.bodies 
  if(v.vertical)
    v.offset.z += -offy;
  else
    v.offset.y += offy;
    
for k,v of model.wings 
  v.offset.y += offy;
  
return model;