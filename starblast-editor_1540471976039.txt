anim = 1;

rotateAroundZ = (name, oname, a, rotatePart, isWing=false) ->
  o = model.bodies[oname];
  
  if(isWing)
    part = model.wings[name];
  else
    part = model.bodies[name];
    
  ox = o.offset.x;
  oy = o.offset.y;
  
  dx = part.offset.x-ox;
  dy = part.offset.y-oy;
  
  ra = -a*0.0174533;
  
  ndx = dx*Math.cos(ra) - dy*Math.sin(ra);
  ndy = dx*Math.sin(ra) + dy*Math.cos(ra);
  
  part.offset.x = ndx+ox;
  part.offset.y = ndy+oy;
  
  if(rotatePart&&!isWing)
    part.angle+=a
    
anchorToPart = (name, oname, xx, yy, zz, isWing=false, oisWing) ->
    if(oisWing)
      o = model.wings[oname];
    else
      o = model.bodies[oname];
    
    if(isWing)
      part = model.wings[name];
    else
      part = model.bodies[name];
      
    part.offset.x = o.offset.x+xx;
    part.offset.y = o.offset.y+yy;
    part.offset.z = o.offset.z+zz;
  
mirrorOnY = (name) ->
  b = model.bodies[name]
  model.bodies[name+"_mirrored"] =
    section_segments: 4
    offset:
      x: b.offset.x
      y: b.offset.y
      z: b.offset.z
    position:
      x: b.position.x.slice(0)
      y: multplyArray(b.position.y.slice(0),-1)
      z: b.position.z.slice(0)
    width: b.width.slice(0)
    height: b.height.slice(0)
    texture: b.texture.slice(0)
    angle: b.angle
    

multiplyArrays = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]*m[i])
  return k;

addArrays = (arr, m, mult=1) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]+m[i]*mult)
  return k;
  
multiplyArray = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]*m)
  return k;

addArray = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]+m)
  return k;

circle = (id, xx, yy, zz, segments, radPosY, radPosZ, tx, h=1) ->
  widths = [];
  heights = [];
  posx = [];
  m = model;
  for i in [0..radPosY.length]
    posx.push(0);
    heights.push(h);
    widths.push(radPosY[i]*Math.tan(Math.PI/segments))
  for i in [0..segments] by 1
    m.bodies[id+"segment"+i] = 
      section_segments: 4
      offset:
        x: xx
        y: yy
        z: zz
      position:
        x: posx
        y: radPosY
        z: radPosZ
      width: widths
      height: heights
      angle: 360*(i/segments)
      texture: tx
  
wingFixedBumps = (xx, yy, zz, lengths, widths, angles, positions, tx, bumpPos, bumpS, toler) ->
  anew = [];
  l = [];
  w = [];
  p = [];
  for i in [0..angles.length-1]
    anew.push(angles[i])
    l.push(lengths[i])
    w.push(widths[i])
    p.push(positions[i])
    if(i==angles.length-1)
      break;
    if(Math.abs(angles[i]-angles[i+1])>toler)
      anew.push(angles[i])
      l.push(0)
      w.push(widths[i+1])
      p.push(positions[i+1])
  
  l.unshift(0)
  w.unshift(0)
  p.unshift(positions[0])
  anew.unshift(anew[0])
  
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  
  l.push(0)
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  anew.push(anew[anew.length-1])
  
  return k = 
    doubleside: true
    offset:
      x: xx
      y: yy
      z: zz
    length: l
    width: w
    angle: anew
    position: p
    texture: tx
    bump:
      position: bumpPos
      size: bumpS

squareBody = (id, xx, yy, zz, w, h, posx, posy, posz, txtop, txsides, txbottom, bump, a=0, sbumpMult=1) ->
  flatw = [];
  flath = [];
  for i in [0..w.length]
    flatw.push(bump*sbumpMult)
    flath.push(bump)
  
  xoff = 0.01
  if(a!=0) 
    xoff = 0
  
  sides = 
    section_segments: 4
    offset:
      x: xx+xoff
      y: yy
      z: zz
    position:
      x: addArrays(posx,w,1)
      y: posy
      z: posz
    width: flatw
    height: h
    texture: txsides
    angle: a
  top = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h)
    width: w
    height: flath
    texture: txtop
    angle: a
  bottom = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h,-1)
    width: w
    height: flath
    texture: txbottom
    angle: a
    
  model.bodies[id+"t"] = top;
  model.bodies[id+"b"] = bottom;
  model.bodies[id+"sides"] = sides;

reactorAttachment = (xx, yy, zz) ->
  return k =
    section_segments: 6
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-12,-12,-10,10,12,12]
      z: [0,0,0,0,0,0,0,0,0]
    width: [0,6,7,7,6,0]
    height: [0,7,8,8,7,0]
    texture: [3.8] 
    angle: 90

###
"lasers":[
{"x":1.072,"y":-1.76,"z":0.048,"angle":0,"damage":[12,12],
"rate":6,"type":1,"speed":[50,50],"number":2,"spread":0,"error":0.5,"recoil":0},
{"x":-1.072,"y":-1.76,"z":0.048,"angle":0,"damage":[12,12],
"rate":6,"type":1,"speed":[50,50],"number":2,"spread":0,"error":0.5,"recoil":0}]
###

rapid = 
  damage: [20,60]
  rate: 4
  type: 1
  speed: [40,240]
  number: 1
  error: 5
  
sniper =
  damage: [120,60]
  rate: 1
  type: 2
  speed: [150,240]
  recoil: 40
  number: 1
  error: 0
  
if(anim==1) 
  weapon = sniper 
else 
  weapon = rapid;
###'"specs":{"shield":{"capacity":[350,350],"reload":[2,2]},
"generator":{"capacity":[750,750],"reload":[30,30]},
"ship":{"mass":130,"speed":[150,150],"rotation":[70,70],"acceleration":[100,100]}},
###

mode = "Retracted"
if(anim==1)
  mode = "Deployed"

model =
  name: 'Niteracer '+mode
  level: 6
  model: 7+anim
  size: 1.05
  zoom: 1/(1+anim)
  specs:
    shield:
      capacity: [400,100]
      reload: [5+anim*-2,3]
    generator:
      capacity: [120,60]
      reload: [30+anim*20,15]
    ship:
      mass: 170
      speed: [150,150]
      rotation: [30*anim*40,30]
      acceleration: [90+anim*-50,90]
  bodies:
    
    windows:
      section_segments: 3
      offset:
        x: 0
        y: 0
        z: 3
      position:
        x: [70,70,25,20,10,0,0,0]
        y: [0,10,20,30,40]
        z: [0,0,0,0,0,0,0,0,0]
      width: [20,15,15,15,0]
      height: [7,7,7,7,0]
      texture: [8.65,8.65,8.65,0.7]
      angle: 90
    
    reactorAttachment1T:
      reactorAttachment(0,77,4)
    reactorAttachment1B:
      reactorAttachment(0,77,-4)
    reactorAttachment2T:
      reactorAttachment(0,87,4)
    reactorAttachment2B:
      reactorAttachment(0,87,-4)
      
    reactorTopGlow:
      section_segments: 4
      offset:
        x: 8
        y: 40
        z: 9.6
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-20,-17,17,20]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,3,3,0]
      height: [0,1,1,0]
      texture: [1,17,1]
    reactorTopMiddleDots:
      section_segments: 4
      offset:
        x: 0
        y: 40
        z: 10.4
      position:
        x: [0,0,0,0,0,0,0,0,0,0]
        y: [-20,-16,-8,-4,4,8,16,20]
        z: [0,0,0,0,0,0,0,0,0,0,0]
      width: [0,3,3,3,3,3,3,3,0]
      height: [0,1,1,1,1,1,1,0]
      texture: [1,17,1,17,1,17,1] 
      angle:180
      
    reactorFront:
      section_segments: 8
      offset:
        x: 0
        y: 12
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-10,-9,-7,-5,-3,3,5,7,15]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,10,13,13,11,11,13,13,0]
      height: [0,10,13,13,11,11,13,13,0]
      texture: [1,1,3,18,8,18,3,1]
      
    enginesFront:
      section_segments: 6
      offset:
        x: 27
        y: 80
        z: 0
      position:
        x: [-6,1,3,3,0,0,0,0]
        y: [-45,-45,-40,-10,-2,20,23]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,8,10,10,14,14,0]
      height: [0,6,6,6,6,6,0]
      texture: [1,1,10,1] 
    enginesTopGlow:
      section_segments: 4
      offset:
        x: 32
        y: 85
        z: 4.5
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-10,-7,7,10]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,3,3,0]
      height: [0,1,1,0]
      texture: [1,17,1]
    engines:
      section_segments: 8
      offset:
        x: 27
        y: 110
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-20,-10,-5,20,20,20,30,10]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,14,14,10,12,14,10,0]
      height: [0,14,14,10,12,14,10,0]
      texture: [1,4,8,17,4,4,17] 
      propeller:true
    
  ###    
  wings: 
    frontSidesWings:
      doubleside: true
      offset:
        x: 60
        y: -95
        z: 19
      length: [-20,0,30,12,5,12,30,0]
      width: [0,0,140,80,80,80,80,140,0]
      angle: [0,0,-10,-70,-90,-110,-170,-180]
      position: addArray([0,0,-20,0,0,0,0,-20,0],20)
      texture: 3
      bump:
        position: 0
        size: 3
    backSidesWings:
      doubleside: true
      offset:
        x: 60
        y: 75
        z: 19
      length: [-20,0,30,12,5,12,30,0]
      width: [0,0,140,80,80,80,80,140,0]
      angle: [0,0,-10,-70,-90,-110,-170,-180]
      position: addArray([0,0,20,0,0,0,0,20,0],20)
      texture: 3
      bump:
        position: 0
        size: 3###
      
offy = 0;
for k,v of model.bodies 
  v.offset.y += offy;
    
for k,v of model.wings 
  v.offset.y += offy;

###  
b = model.bodies
w = model.wings
b.gunRods.offset.y += anim*(-60);
b.gunCircle1.offset.y += anim*(-20);
b.gunCircle2.offset.y += anim*(-40);
b.gunCircle3.offset.y += anim*(-60);

rotateAroundZ("frontSideArm1","frontSideArm1",-30*anim,1)
rotateAroundZ("frontSideArm2","frontSideArm1",-30*anim,1)
rotateAroundZ("frontSideAnchor","frontSideArm1",-30*anim)

anchorToPart("frontSidesWings","frontSideAnchor",4,-5,19,1)

anchorToPart("frontWingConnectors1","frontSideAnchor",-1,20,0)
anchorToPart("frontWingConnectors2","frontSideAnchor",-1,-10,0)

rotateAroundZ("backSideArm1","backSideArm1",30*anim,1)
rotateAroundZ("backSideArm2","backSideArm1",30*anim,1)
rotateAroundZ("enginesBackAnchor","backSideArm1",30*anim,0)

anchorToPart("enginesBackSide","enginesBackAnchor",-19,10,0)
anchorToPart("backSidesWings","enginesBackAnchor",4,-35,19,1)

anchorToPart("backWingConnectors1","enginesBackAnchor",-1,10,0)
anchorToPart("backWingConnectors2","enginesBackAnchor",-1,-20,0)

circle("frontSideAnchors", 32, 0, 10, 16, [0,5,7,10,10,7,5,0], [0,0,-3,-3,-21,-21,-24,-24], [63,63,3,3,3,63,63],0);
circle("backSideAnchors", 32, 40, 10, 16, [0,5,7,10,10,7,5,0], [0,0,-3,-3,-17,-17,-20,-20], [63,63,3,3,3,63,63],0);
  
squareBody("topUnderCockpit", 0, -40, 8, 
[15,20,20,15], [5,7,7,5], 
[0,0,0,0], [0,10,50,70], [-6,0,0,-2], 
[4], [4], [4], 2)

circle("cockpit", 0, -10, 30, 6, [0,9,9,13,14,13,14,15,15], [-1,-1,0,-2,-3,-3,-9,-9,-18], [9,3,4,4,3,9,3,4],0);
  ###
  
mirrorOnY("windows")

squareBody("reactor", 0, 10, 0, 
[5,15,15,7,3], [5,9,9,9,5], 
[0,0,0,0,0], [5,10,50,60,70], [0,0,0,0,0], 
[1,1,1,4], [4], [4], 2)
  
return model;