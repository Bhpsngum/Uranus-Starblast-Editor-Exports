rotateAroundZ = (name, oname, a, rotatePart, isWing=false) ->
  o = model.bodies[oname];
  
  if(isWing)
    part = model.wings[name];
  else
    part = model.bodies[name];
    
  ox = o.offset.x;
  oy = o.offset.y;
  
  dx = part.offset.x-ox;
  dy = part.offset.y-oy;
  
  ra = -a*0.0174533;
  
  ndx = dx*Math.cos(ra) - dy*Math.sin(ra);
  ndy = dx*Math.sin(ra) + dy*Math.cos(ra);
  
  part.offset.x = ndx+ox;
  part.offset.y = ndy+oy;
  
  if(rotatePart&&!isWing)
    part.angle+=a
    
anchorToPart = (name, oname, xx, yy, zz, isWing=false, oisWing) ->
    if(oisWing)
      o = model.wings[oname];
    else
      o = model.bodies[oname];
    
    if(isWing)
      part = model.wings[name];
    else
      part = model.bodies[name];
      
    part.offset.x = o.offset.x+xx;
    part.offset.y = o.offset.y+yy;
    part.offset.z = o.offset.z+zz;
  

multiplyArrays = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]*m[i])
  return k;

addArrays = (arr, m, mult=1) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]+m[i]*mult)
  return k;
  
multiplyArray = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]*m)
  return k;

addArray = (arr, m) ->
  k = [];
  for i in [0..arr.length]
    k.push(arr[i]+m)
  return k;

circle = (id, xx, yy, zz, segments, radPosY, radPosZ, tx, h=1) ->
  widths = [];
  heights = [];
  posx = [];
  m = model;
  for i in [0..radPosY.length]
    posx.push(0);
    heights.push(h);
    widths.push(radPosY[i]*Math.tan(Math.PI/segments))
  for i in [0..segments] by 1
    m.bodies[id+"segment"+i] = 
      section_segments: 4
      offset:
        x: xx
        y: yy
        z: zz
      position:
        x: posx
        y: radPosY
        z: radPosZ
      width: widths
      height: heights
      angle: 360*(i/segments)
      texture: tx
  
wingFixedBumps = (xx, yy, zz, lengths, widths, angles, positions, tx, bumpPos, bumpS, toler) ->
  anew = [];
  l = [];
  w = [];
  p = [];
  for i in [0..angles.length-1]
    anew.push(angles[i])
    l.push(lengths[i])
    w.push(widths[i])
    p.push(positions[i])
    if(i==angles.length-1)
      break;
    if(Math.abs(angles[i]-angles[i+1])>toler)
      anew.push(angles[i])
      l.push(0)
      w.push(widths[i+1])
      p.push(positions[i+1])
  
  l.unshift(0)
  w.unshift(0)
  p.unshift(positions[0])
  anew.unshift(anew[0])
  
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  
  l.push(0)
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  anew.push(anew[anew.length-1])
  
  return k = 
    doubleside: true
    offset:
      x: xx
      y: yy
      z: zz
    length: l
    width: w
    angle: anew
    position: p
    texture: tx
    bump:
      position: bumpPos
      size: bumpS

squareBody = (id, xx, yy, zz, w, h, posx, posy, posz, txtop, txsides, txbottom, bump, a=0, sbumpMult=1, doubleSides=false) ->
  flatw = [];
  flath = [];
  for i in [0..w.length]
    flatw.push(bump*sbumpMult)
    flath.push(bump)
  
  xoff = 0.01
  if(a!=0) 
    xoff = 0
  
  sides = 
    section_segments: 4
    offset:
      x: xx+xoff
      y: yy
      z: zz
    position:
      x: addArrays(posx,w,1)
      y: posy
      z: posz
    width: flatw
    height: h
    texture: txsides
    angle: a
  top = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h)
    width: w
    height: flath
    texture: txtop
    angle: a
  bottom = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h,-1)
    width: w
    height: flath
    texture: txbottom
    angle: a
  if(doubleSides)
    dsides = 
      section_segments: 4
      offset:
        x: xx+xoff
        y: yy
        z: zz
      position:
        x: multiplyArray(addArrays(posx,w,-1), 1)
        y: posy
        z: posz
      width: flatw
      height: h
      texture: txsides
      angle: a
    model.bodies[id+"dsides"] = dsides;
    
  model.bodies[id+"t"] = top;
  model.bodies[id+"b"] = bottom;
  model.bodies[id+"sides"] = sides;
  
bodyStarY = (name, number, aroundX, aroundY) ->
  b = model.bodies[name]
  
  for i in [1..number-1] by 1
    n = name+"star"+i
    nposx = [];
    nposz = [];
    
    ang = (i*360/number)
    ang = ang*0.0174533

    for j in [0..b.position.x.length-1] by 1
      if(j>=b.position.z.length)
        break;
      ox = b.position.x[j]
      oz = b.position.z[j]
      nposx.push(ox*Math.cos(ang)-oz*Math.sin(ang))
      nposz.push(ox*Math.sin(ang)+oz*Math.cos(ang))
    
    ox = b.offset.x-aroundX
    oz = b.offset.z-aroundY
    
    model.bodies[n] =
      section_segments: b.section_segments
      offset:
        x: ox*Math.cos(ang)-oz*Math.sin(ang)+aroundX
        y: b.offset.y
        z: ox*Math.sin(ang)+oz*Math.cos(ang)+aroundY
      position:
        x: nposx
        y: b.position.y.slice(0)
        z: nposz
      width: b.width.slice(0)
      height: b.height.slice(0)
      texture: b.texture.slice(0)
      angle: 0
      propeller: b.propeller
  
bodyStar = (name, number) ->
  b = model.bodies[name]
  for i in [1..number-1] by 1
    n = name+"star"+i
    model.bodies[n] =
      section_segments: b.section_segments
      offset:
        x: b.offset.x
        y: b.offset.y
        z: b.offset.z
      position:
        x: b.position.x.slice(0)
        y: b.position.y.slice(0)
        z: b.position.z.slice(0)
      width: b.width.slice(0)
      height: b.height.slice(0)
      texture: b.texture.slice(0)
      angle: b.angle+(i*360/number)
      
duplicateBody = (name, newName) ->
  if(newName==undefined)
    newName = name+"duplicate"
  b = model.bodies[name]
  model.bodies[newName] =
    section_segments: b.section_segments
    offset:
      x: b.offset.x
      y: b.offset.y
      z: b.offset.z
    position:
      x: multiplyArray(b.position.x.slice(0),-1)
      y: b.position.y.slice(0)
      z: b.position.z.slice(0)
    width: b.width.slice(0)
    height: b.height.slice(0)
    texture: b.texture.slice(0)
  n = model.bodies[newName]
  if(b.angle!=undefined)
    n.angle = -b.angle
  if(b.propeller!=undefined)
    n.propeller = b.propeller
  return n
      
shieldPiece = (xx, yy, zz, t=1) ->
  return k =
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-10,-10,-5,-5,0,0,35]
      z: multiplyArray([0,0,2,2,4,4,60,0,0],t)
    width: [0,20,20,5,5,35,25]
    height: [0,5,5,3,3,3,0]
    texture: [3,3+14*glRet,3,4,3,63]
    angle: 0
    
mapToRange = (v, min, max) ->
  if(v<min)
    return 0
  if(v>max)
    return 1
  return (v-min)/(max-min)
  
offsetBodyOnX = (name,dist) ->
  b = model.bodies[name]
  if(b.angle==undefined)
    b.position.x=addArray(model.bodies[name].position.x,dist)
  else
    a = 0.0174533*b.angle
    b.position.x=addArray(model.bodies[name].position.x,Math.cos(a)*dist)
    b.position.y=addArray(model.bodies[name].position.y,Math.sin(a)*dist)
    
reactorTopGlowPiece = (y,top=true)->
  return k =
    section_segments: 8
    offset:
      x: 0
      y: 22*if top then 1 else -1
      z: y
    position:
      x: [0,0,0,0,0,0,0,0]
      y: multiplyArray([-4,0,0,4,4,5,5],if top then 1 else -1)
      z: [0,0,0,0,0,0,0,0,0]
    width: multiplyArray(
      [3,3,2.5,2.5,3,2,0]
      ,if top then 1 else -1)
    height: [3,3,2.5,2.5,3,2,0]
    texture: [1,1,17,4,1,17] 
    vertical: true

frontGunShieldHolder = (outer = true, top = true) ->
 return k =
    section_segments: 4
    offset:
      x: 0
      y: -50
      z: 5*if top then 1 else -1
    position:
      x: multiplyArray(addArray([0,0,0,0,0,0,0,0],-10),if outer then 1 else -1)
      y: [-20,-20,5,15,30,30]
      z: multiplyArray([10,10,10,0,0,0,0,0,0],if top then 1 else -1)
    width: [0,3,3,3,3,0]
    height: [0,3,3,3,3,0]
    texture: [4] 
    
canister = (yy,top=false)->
  return k =
    section_segments: 8
    offset:
      x: 0
      y: yy
      z: if top then 10 else -10
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-15,-15,-13,-10,10,13,15,15]
      z: [0,0,0,0,0,0,0,0,0]
    width: [0,3,6,7,7,6,3,0]
    height: [0,3,6,7,7,6,3,0]
    texture: [63] 
    angle: 90
    
model =
  name: 'Sidewinder LMT'
  level: 6
  model: 16
  size: 1
  zoom: 0.8
  specs:
    shield:
      capacity: [300,300]
      reload: [2,2]
    generator:
      capacity: [200,200]
      reload: [55,55]
    ship:
      mass: 110
      speed: [150,150]
      rotation: [30,105]
      acceleration: [50,30]
  bodies:
    main:
      section_segments: 6
      offset:
        x: 0
        y: -50
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0,0,0]
        y: [-10,0,30,35,70,120,122]
        z: [0,0,0,0,0,0,0,0,0]
      width: [15,20,20,25,25,20,0]
      height: [0,10,10,10,10,10,0]
      texture: [11,10,3,10,11.6,0.8]
      
    cockpit:
      section_segments: 6
      offset:
        x: 0
        y: -49
        z: 8
      position:
        x: [0,0,0,0,0,0,0,0,0,0,0]
        y: [-10,-7,0,10,30,40,60,80]
        z: [-7,-3,0,0,0,0,0,-6,0,0]
      width: [6,8,12,12,12,15,15,15]
      height: [0,3,4,5,5,10,10,5]
      texture: [4,4,9,9,4,18,18]
    front:
      section_segments: 4
      offset:
        x: 20
        y: -50
        z: 0
      position:
        x: [-14,0,0,-21,-21,0,0,0]
        y: [-24,-10,0,20,20]
        z: [0,0,0,0,0,0,0,0,0]
      width: [5,5,5,5,0]
      height: [5,5,5,5,0]
      texture: [4,63,4] 
      angle:45
    underside:
      section_segments: 6
      offset:
        x: 0
        y: 0
        z: -5
      position:
        x: [0,0,0,0,0,0,0,0,0,0]
        y: [-57,-50,-30,10,50,70]
        z: [2,1,0,0,0,0,0,0,0]
      width: [17,21,23,30,20,0]
      height: [0,6,7,7,5,0]
      texture: [3.8]
    reactorHeatSinks:
      section_segments: 6
      offset:
        x: 8
        y: 46
        z: 8
      position:
        x: [0,0,0,0,0,0,0,0,0,0]
        y: [-10,0,17,20,22]
        z: [-6,0,0,-1,-5,0,0,0,0]
      width: [5,5,5,5,5,5,5,5]
      height: [0,5,5,5,0]
      texture: [3.8,16.8,3.8,3.8]
    reactorEngine:
      section_segments: 6
      offset:
        x: 0
        y: 46
        z: 8
      position:
        x: [0,0,0,0,0,0,0,0,0,0,0,0]
        y: [-30,-15,-10,-5,18,23,28,28,25]
        z: [0,0,0,0,0,0,0,0,0]
      width: [10,10,8,8,8,8,6,5,0]
      height: [6,6,8,8,8,8,6,5,0]
      texture: [3.8,18,13,16,13,18,3.8,16.8]
      propeller:true
    bottomEngines:
      section_segments: 6
      offset:
        x: 10
        y: 43
        z: -6
      position:
        x: [0,0,0,0,0,0,0,0,0,0]
        y: [-20,-10,20,25,30,35,30]
        z: [3,0,0,0,0,0,0,0,0]
      width: [10,10,10,7,7,5,0]
      height: [7,7,7,7,7,5,0]
      texture: [2.8,2.8,2.8,3.8,18,16.8]
      propeller:true
      
    
    weapon:
      section_segments: 6
      offset:
        x: 0
        y: -12
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0,0,0]
        y: [-50,-70,-40,-40,-10,10,30,31]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,7,9,11,11,11,11,0]
      height: [0,7,9,11,20,20,15,0]
      texture: [16.8,13,11,11,1,10,0.8]
      laser:
        damage: [150,150]
        rate: 1
        type: 2
        speed: [120,70]
        number: 1
        error: 0
        recoil: 70
      
    gunConnectorFront:
      section_segments: 6
      offset:
        x: 0
        y: -20
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [10,25,27,50]
        z: [0,0,0,0,0,0,0,0,0]
      width: [10,10,6,6]
      height: [5,5,3,3]
      texture: [3.8,63,0.8] 
      angle: -90
        
    reactor:
      section_segments: 12
      offset:
        x: 0
        y: 39
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        y: [-13,-13,-11,-11,-13,-12,-10,10,12,12,10,10,30,30]
        z: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      width: [0,7,9,19,21,23,25,25,23,13,12,10,15,0]
      height: [0,7,9,19,21,23,25,25,23,13,12,5,5,0]
      texture: [18,8,17,1,1,1,1,1,1,4,18,11] 
      angle: 90
    
    reactorTopGlowPiece1:
      reactorTopGlowPiece(-5,1)
    reactorTopGlowPiece2:
      reactorTopGlowPiece(-12,1)
    reactorTopGlowPiece3:
      reactorTopGlowPiece(-19,1)
    reactorTopGlowPiece4:
      reactorTopGlowPiece(-5,0)
    reactorTopGlowPiece5:
      reactorTopGlowPiece(-12,0)
    reactorTopGlowPiece6:
      reactorTopGlowPiece(-19,0)
      
    tubesSideOuter:
      section_segments: 6
      offset:
        x: 0
        y: 0
        z: 13
      position:
        x: [7,3,0,0,5,5,0,0]
        y: [-20,-15,-5,7,15,30]
        z: [-7,-3,0,0,0,0,0,0,0]
      width: [3,3,3,3,3,3]
      height: [3,3,3,3,3,3]
      texture: [63] 
    tubesSideInner:
      section_segments: 6
      offset:
        x: 0
        y: 0
        z: 13
      position:
        x: multiplyArray([7,3,0,0,5,5,0,0],-1)
        y: [-20,-15,-5,7,15,30]
        z: [-7,-3,0,0,0,0,0,0,0]
      width: [3,3,3,3,3,3]
      height: [3,3,3,3,3,3]
      texture: [63] 
      
    engineMain:
      section_segments: 8
      offset:
        x: 0
        y: 80
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0,0,0]
        y: [-40,-15,-10,3,8,10,11,16,25,15]
        z: [0,0,0,0,0,0,0,0,0,0,0]
      width: [10,10,7,7,10,10,15,15,12,0]
      height: [10,10,7,7,10,10,15,15,12,0]
      texture: [1,13,4,13,8,4,4,4,17] 
      propeller: true
      
    engineMainHorizontalPiece:
      section_segments: 6
      offset:
        x: 0
        y: 75
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-20,-10,17,20]
        z: [0,0,0,0,0,0,0,0,0]
      width: [13,15,15,0]
      height: [6,6,6,0]
      texture: [1,18] 
      
    canister1: canister(71, true)
    canister2: canister(84, true)
    canister3: canister(71, false)
    canister4: canister(84, false)
    ###   
    frontGunShieldHolder1:
      frontGunShieldHolder(true, true)
    frontGunShieldHolder2:
      frontGunShieldHolder(false, true)
    frontGunShieldHolder3:
      frontGunShieldHolder(true, false)
    frontGunShieldHolder4:
      frontGunShieldHolder(false, false)
    ###   
  ###
  wings:
    cockpitCorners:
      length: [7]
      width: [20,10]
      angle: [-12]
      position: [-3,0]
      doubleside: true
      offset:
        x: 8
        y: -15+y
        z: 8
      bump:
        position: 50
        size: 35
      texture: [9]
    weaponsBottomShieldTop:
      length: [0,4,7,7,4,0]
      width: [0,60,50,50,50,60,0]
      angle: [90,90,30,-30,-90,-90]
      position: [-10,-10,0,5,0,-10,-10]
      doubleside: true
      offset:
        x: 52
        y: -15+y
        z: 0
      bump:
        position: 10
        size: 3
      texture: [1]
    weaponsBottomShieldBottom:
      length: [0,4,7,7,4,0]
      width: [0,60,50,50,50,60,0]
      angle: [-90,-90,-30,30,90,90]
      position: [-10,-10,0,5,0,-10,-10]
      doubleside: true
      offset:
        x: 52
        y: -15+y
        z: -7
      bump:
        position: 10
        size: 3
      texture: [1]
  ###
  
gunOffX = -45

offsetBodyOnX("weapon",gunOffX)
offsetBodyOnX("reactor",gunOffX)

offsetBodyOnX("reactorTopGlowPiece1",gunOffX)
offsetBodyOnX("reactorTopGlowPiece2",gunOffX)
offsetBodyOnX("reactorTopGlowPiece3",gunOffX)
offsetBodyOnX("reactorTopGlowPiece4",gunOffX)
offsetBodyOnX("reactorTopGlowPiece5",gunOffX)
offsetBodyOnX("reactorTopGlowPiece6",gunOffX)

offsetBodyOnX("tubesSideOuter",gunOffX-13)
offsetBodyOnX("tubesSideInner",gunOffX+13)

offsetBodyOnX("engineMain",gunOffX)
offsetBodyOnX("engineMainHorizontalPiece",gunOffX)

for i in [1..4]
  offsetBodyOnX("canister"+i,gunOffX)

#offsetBodyOnX("frontGunShieldTopT",gunOffX)

#for i in [1..4]
#  offsetBodyOnX("frontGunShieldHolder"+i,gunOffX)

###squareBody("cockpitTower", 10, -105, -3, 
[7,7,7,7,7], [6,6,6,4,3], 
[0,5,5,0,0,0,0,0], [20,30,60,70,80,100,105], [0,0,0,0,0,5], 
[1], [1], [1], 2, 0, 1, true)###

squareBody("gunTop", 0, -70, 13, 
[6,6,6,4,4], [6,6,6,6,10], 
[0,0,0,0,0,0,0,0], [50,55,67,70,100], [-10,0,0,0,-4], 
[1], [1], [1], 2, 1, 1, true)

offsetBodyOnX("gunTopt",gunOffX-1)
offsetBodyOnX("gunTopb",gunOffX-1)
offsetBodyOnX("gunTopsides",gunOffX-1)
offsetBodyOnX("gunTopdsides",gunOffX-1)

squareBody("gunBottom", 0, -70, -13, 
[6,6,6,4,4], [6,6,6,6,10], 
[0,0,0,0,0,0,0,0], [50,55,67,70,100], [10,0,0,0,4], 
[1], [1], [1], 2, 1, 1, true)

offsetBodyOnX("gunBottomt",gunOffX-1)
offsetBodyOnX("gunBottomb",gunOffX-1)
offsetBodyOnX("gunBottomsides",gunOffX-1)
offsetBodyOnX("gunBottomdsides",gunOffX-1)

squareBody("cockpit", 0, -75, 10, 
[5,7,7,7,7], [2,2,6,7,3], 
[0,0,0,0,0,0,0,0], [20,26,41,56,70], [-6,-1,0,0,0,5], 
[4,9,9,4], [4,9,9,4], [9], 2, 0, 1, true)

for k,v of model.bodies
  if(v.offset.x!=0)
    dupl = duplicateBody(k)
    offsetBodyOnX(k,v.offset.x)
    offsetBodyOnX(k+"duplicate",-v.offset.x)
    v.offset.x = 0
    dupl.offset.x = 0
    

for k of model.bodies
  offsetBodyOnX(k,20)

return model