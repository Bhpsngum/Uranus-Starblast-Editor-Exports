pstart = performance.now()

anim = 1;
mode = 3;

rotateAroundZ = (name, oname, a, rotatePart, isWing=false) ->
  o = model.bodies[oname];
  
  if(isWing)
    part = model.wings[name];
  else
    part = model.bodies[name];
    
  ox = o.offset.x;
  oy = o.offset.y;
  
  dx = part.offset.x-ox;
  dy = part.offset.y-oy;
  
  ra = -a*0.0174533;
  
  ndx = dx*Math.cos(ra) - dy*Math.sin(ra);
  ndy = dx*Math.sin(ra) + dy*Math.cos(ra);
  
  part.offset.x = ndx+ox;
  part.offset.y = ndy+oy;
  
  if(rotatePart&&!isWing)
    part.angle+=a
    
anchorToPart = (name, oname, xx, yy, zz, isWing=false, oisWing) ->
    if(oisWing)
      o = model.wings[oname];
    else
      o = model.bodies[oname];
    
    if(isWing)
      part = model.wings[name];
    else
      part = model.bodies[name];
      
    part.offset.x = o.offset.x+xx;
    part.offset.y = o.offset.y+yy;
    part.offset.z = o.offset.z+zz;
  

multiplyArrays = (arr, m) ->
  k = [];
  for i in [0..arr.length-1]
    k.push(arr[i]*m[i])
  return k;

addArrays = (arr, m, mult=1) ->
  k = [];
  for i in [0..arr.length-1]
    k.push(arr[i]+m[i]*mult)
  return k;
  
multiplyArray = (arr, m) ->
  k = [];
  for i in [0..arr.length-1]
    k.push(arr[i]*m)
  return k;

addArray = (arr, m) ->
  k = [];
  for i in [0..arr.length-1]
    k.push(arr[i]+m)
  return k;
  
reverseArray = (arr) ->
  k = [];
  for i in [arr.length-1..0]
    k.push(arr[i])
  return k;
  
cycleArray = (arr, shift) ->
  k = [];
  j = shift
  for i in [0..arr.length-1]
    k.push(arr[j])
    j++
    if(j>arr.length-1)
      j = 0
  return k;
  
fillArray = (what, length) ->
  k = [];
  for i in [0..length-1]
    k.push(what)
  return k;
  
fillArrayIndexes = (length) ->
  k = [];
  for i in [0..length-1]
    k.push(i)
  return k;
  
fillArrayAlternate = (options, sequence) ->
  k = [];
  currentOption = 0;
  for i in [0..sequence.length-1]
    for j in [0..sequence[i]]
      k.push(options[currentOption])
    currentOption++
    if(currentOption>=options.length)
      currentOption = 0
  return k;
  
segments = (num) ->
  k = [];
  for i in [0..num-1]
    k.push((360/num)*i)
  return k;

circle = (id, xx, yy, zz, segments, radPosY, radPosZ, tx, h=1) ->
  widths = [];
  heights = [];
  posx = [];
  m = model;
  for i in [0..radPosY.length]
    posx.push(0);
    heights.push(h);
    widths.push(radPosY[i]*Math.tan(Math.PI/segments))
  for i in [0..segments] by 1
    m.bodies[id+"segment"+i] = 
      section_segments: 4
      offset:
        x: xx
        y: yy
        z: zz
      position:
        x: posx
        y: radPosY
        z: radPosZ
      width: widths
      height: heights
      angle: 360*(i/segments)
      texture: tx
      
circleEfficientFlat = (id, xx, yy, zz, seg, radPosY, radPosZ, tx, h=1, spawn) ->
  widths = [];
  heights = [];
  posx = [];
  m = model;
  for i in [0..radPosY.length]
    posx.push(0);
    heights.push(h);
    widths.push(radPosY[i]*Math.tan(Math.PI/seg))
  for i in [0..seg] by 1
    if(spawn!=undefined&&!spawn[i])
      continue
    m.bodies[id+"segment"+i] = 
      section_segments: addArray(segments(2),90)
      offset:
        x: xx
        y: yy
        z: zz
      position:
        x: posx
        y: radPosY
        z: radPosZ
      width: widths
      height: heights
      angle: 360*(i/seg)
      texture: tx
  
wingFixedBumps = (xx, yy, zz, lengths, widths, angles, positions, tx, bumpPos, bumpS, toler) ->
  anew = [];
  l = [];
  w = [];
  p = [];
  for i in [0..angles.length-1]
    anew.push(angles[i])
    l.push(lengths[i])
    w.push(widths[i])
    p.push(positions[i])
    if(i==angles.length-1)
      break;
    if(Math.abs(angles[i]-angles[i+1])>toler)
      anew.push(angles[i])
      l.push(0)
      w.push(widths[i+1])
      p.push(positions[i+1])
  
  l.unshift(0)
  w.unshift(0)
  p.unshift(positions[0])
  anew.unshift(anew[0])
  
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  
  l.push(0)
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  anew.push(anew[anew.length-1])
  
  return k = 
    doubleside: true
    offset:
      x: xx
      y: yy
      z: zz
    length: l
    width: w
    angle: anew
    position: p
    texture: tx
    bump:
      position: bumpPos
      size: bumpS

squareBody = (id, xx, yy, zz, w, h, posx, posy, posz, txtop, txsides, txbottom, bump, a=0, sbumpMult=1, doubleSides=false) ->
  flatw = [];
  flath = [];
  for i in [0..w.length]
    flatw.push(bump*sbumpMult)
    flath.push(bump)
  
  xoff = 0.01
  if(a!=0) 
    xoff = 0
  
  sides = 
    section_segments: 4
    offset:
      x: xx+xoff
      y: yy
      z: zz
    position:
      x: addArrays(posx,w,1)
      y: posy
      z: posz
    width: flatw
    height: h
    texture: txsides
    angle: a
  top = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h)
    width: w
    height: flath
    texture: txtop
    angle: a
  bottom = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h,-1)
    width: w
    height: flath
    texture: txbottom
    angle: a
  if(doubleSides)
    dsides = 
      section_segments: 4
      offset:
        x: xx+xoff
        y: yy
        z: zz
      position:
        x: multiplyArray(addArrays(posx,w,-1), 1)
        y: posy
        z: posz
      width: flatw
      height: h
      texture: txsides
      angle: a
    model.bodies[id+"dsides"] = dsides;
    
  model.bodies[id+"t"] = top;
  model.bodies[id+"b"] = bottom;
  model.bodies[id+"sides"] = sides;
  
bodyStarY = (name, number, aroundX, aroundY, aoffset = 0, offx = 0, spawn) ->
  b = model.bodies[name]
  
  delete model.bodies[name]
  
  for i in [0..(number-1)] by 1
    
    if(spawn!=undefined&&!spawn[i])
      continue
    
    if(i == 0)
      n = name
    else
      n = name+"star"+i
    nposx = [];
    nposz = [];
    
    ang = (i*360/number)+aoffset
    a = ang
    ang = ang*0.0174533

    for j in [0..b.position.x.length-1] by 1
      if(j>=b.position.z.length)
        break;
      ox = b.position.x[j]
      oz = b.position.z[j]
      nposx.push(ox*Math.cos(ang)-oz*Math.sin(ang))
      nposz.push(ox*Math.sin(ang)+oz*Math.cos(ang))
    
    ox = b.offset.x-aroundX
    oz = b.offset.z-aroundY
    
    segments = b.section_segments
    
    if(segments.length != undefined)
      segments = addArray(segments,a)
    
    model.bodies[n] =
      section_segments: segments
      offset:
        x: 0
        y: b.offset.y
        z: aroundY+ox*Math.sin(ang)+oz*Math.cos(ang)+aroundY
      position:
        x: addArray(nposx,ox*Math.cos(ang)-oz*Math.sin(ang)+aroundX+offx)
        y: b.position.y.slice(0)
        z: addArray(nposz,0)
      width: b.width.slice(0)
      height: b.height.slice(0)
      texture: b.texture.slice(0)
      angle: b.angle
      propeller: b.propeller
      vertical: b.vertical
      laser: b.laser
  
bodyStar = (name, number) ->
  b = model.bodies[name]
  for i in [0..number-1] by 1
    if(i == 0)
      n = name
    else
      n = name+"star"+i
    model.bodies[n] =
      section_segments: b.section_segments
      offset:
        x: b.offset.x
        y: b.offset.y
        z: b.offset.z
      position:
        x: b.position.x.slice(0)
        y: b.position.y.slice(0)
        z: b.position.z.slice(0)
      width: b.width.slice(0)
      height: b.height.slice(0)
      texture: b.texture.slice(0)
      angle: b.angle+(i*360/number)
      vertical: b.vertical
      laser: b.laser
      
shieldPiece = (xx, yy, zz, t=1) ->
  return k =
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-10,-10,-5,-5,0,0,35]
      z: multiplyArray([0,0,2,2,4,4,60,0,0],t)
    width: [0,20,20,5,5,35,25]
    height: [0,5,5,3,3,3,0]
    texture: [3,3+14*glRet,3,4,3,63]
    angle: 0
    
mapToRange = (v, min, max) ->
  if(v<min)
    return 0
  if(v>max)
    return 1
  return (v-min)/(max-min)

duplicateBody = (name, newName) ->
  if(newName==undefined)
    newName = name+"duplicate"
  b = model.bodies[name]
  model.bodies[newName] =
    section_segments: b.section_segments
    offset:
      x: b.offset.x
      y: b.offset.y
      z: b.offset.z
    position:
      x: b.position.x.slice(0)
      y: b.position.y.slice(0)
      z: b.position.z.slice(0)
    width: b.width.slice(0)
    height: b.height.slice(0)
    texture: b.texture.slice(0)
  n = model.bodies[newName]
  if(b.angle!=undefined)
    n.angle = b.angle
  if(b.propeller!=undefined)
    n.propeller = b.propeller
  return n

bisect = (a, b) ->
    #thx darron. why is this so hard?!
    diff = ( ( a - b + 180 + 360 ) % 360 ) - 180
    angle = (360 + b + ( diff / 2 ) ) % 360
    return angle

unsignedMod = (yeet, n) ->
  return (yeet % n + n) % n
  
angleBetween = (target, source) ->
  #thanks bennedich
  a = target - source
  a = unsignedMod((a + 180), 360) - 180
  return a

skewSegmentsTowards = (arr, amount, mult, offset=0) ->
    k = []
    for i in [0..arr.length-1]
      minDist = 360
      minJ = 0
      for j in [0..amount-1]
        if(Math.abs(angleBetween(arr[i],j*(360/amount)+offset))<Math.abs(minDist))
          minJ = j
          minDist = angleBetween(arr[i],j*(360/amount)+offset)
      if(minDist<360)
        k.push(minJ*(360/amount)+offset+minDist*mult)
    return k
  
shellify = (name, thiccness = 0.2, spawn) ->
  
  #careful - some hardcoded values in this bitch
  #might fix those one day
  
  orig = model.bodies[name]

  segmentSizes = []
  for i in [0..orig.section_segments.length-2]
    segmentSizes.push(angleBetween(orig.section_segments[i],orig.section_segments[i+1]))
    
  i = orig.section_segments.length-1
  segmentSizes.push(angleBetween(orig.section_segments[i],orig.section_segments[0]))
  for i in [0..segmentSizes.length-1]
    segmentSizes[i] = segmentSizes[i]*.01# 0.1 / Math.cos(Math.PI / (0.0174533*(360/segmentSizes[i])))

  segmentDirs = []
  for i in [0..orig.section_segments.length-2]
    segmentDirs.push(bisect(orig.section_segments[i],orig.section_segments[i+1])+90)
  
  i = orig.section_segments.length-1
  segmentDirs.push(bisect(orig.section_segments[i],orig.section_segments[0])+90)
  
  capArray = (arr,using) ->
    if(using!=undefined)
      arr.unshift(using)
      arr.push(using)
    else
      arr.unshift(arr[0])
      arr.push(arr[arr.length-1])
  
  blength = orig.position.y.length
  
  tx = orig.texture.slice(0)
  capArray(tx)
  
  owidth = orig.width.slice(0,blength)
  capArray(owidth) 
  oheight = orig.height.slice(0,blength)
  capArray(oheight) 
  
  width = orig.width.slice(0,blength)
  capArray(width,0)
  height = orig.height.slice(0,blength)
  capArray(height,0)
  
  xpos = orig.position.x.slice(0)
  capArray(xpos)
  ypos = orig.position.y.slice(0)
  capArray(ypos)
  zpos = orig.position.z.slice(0)
  capArray(zpos)
  
  
  for i in [0..segmentDirs.length-1]
    if(spawn!=undefined&&!spawn[i])
      continue
    radang = 0.0174533*segmentDirs[i]
    model.bodies["shellify_"+name+i] =
      section_segments: addArray(skewSegmentsTowards(addArray(segments(4),45),2,thiccness,0),segmentDirs[i])
      offset:
        x: 0
        y: orig.offset.y
        z: orig.offset.z
      position:
        x: addArrays(addArray(multiplyArray(owidth,Math.cos(radang)),orig.offset.x),xpos)
        y: ypos
        z: addArrays(multiplyArray(oheight,Math.sin(radang)),zpos)
      width: multiplyArray(width,segmentSizes[i]*1)
      height: multiplyArray(height,segmentSizes[i]*1)
      texture: tx
      
  if(orig.offset.x!=0)
    segmentDirs = multiplyArray(addArray(segmentDirs,-180),-1)
    orig.offset.x = -orig.offset.x
    xpos = multiplyArray(xpos,-1)
    for i in [0..segmentDirs.length-1]
      if(spawn!=undefined&&!spawn[i])
        continue
      radang = 0.0174533*segmentDirs[i]
      model.bodies["shellify_mirror"+name+i] =
        section_segments: addArray(skewSegmentsTowards(addArray(segments(4),45),2,thiccness,0),segmentDirs[i])
        offset:
          x: 0
          y: orig.offset.y
          z: orig.offset.z
        position:
          x: addArrays(addArray(multiplyArray(owidth,Math.cos(radang)),orig.offset.x),xpos)
          y: ypos
          z: addArrays(multiplyArray(oheight,Math.sin(radang)),zpos)
        width: multiplyArray(width,segmentSizes[i]*1)
        height: multiplyArray(height,segmentSizes[i]*1)
        texture: tx
    
  delete model.bodies[name]
  ###for i in [0..segmentDirs.length-1]
    model.bodies["yeetusus"+i] =
      section_segments: 4
      offset:
        x: orig.offset.x+30
        y: orig.offset.z
        z: orig.offset.y
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [0,70]
        z: [0,0,0,0,0,0,0,0,0]
      width: [3,0]
      height: [3,0]
      texture: [4,63,4] 
      vertical: true
      angle: -segmentDirs[i]###

exhaust = (xx, yy, zz, size) ->
  return k =
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [0,0]
      z: [0,0,0,0,0,0,0,0,0]
    width: [size,size]
    height: [size,size]
    texture: ["yeet"] 
    propeller: true
    
bodyTubeRepeatMirror = (name) ->
  b = model.bodies[name]
  l = b.width.length-1
  newpx = b.position.x.slice(0,l)
  newpy = b.position.y.slice(0,l)
  newpz = b.position.z.slice(0,l)
  newW = b.width.slice(0,l)
  newH = b.height.slice(0,l)
  newtx = b.texture.slice(0,l)
  for i in [l..0]
    newpx.push(b.position.x[i])
    newpy.push(b.position.y[i]*-1)
    newpz.push(b.position.z[i])
    
    newW.push(b.width[i])
    newH.push(b.height[i])
    
  for i in [b.texture.length-1..0]  
    newtx.push(b.texture[i])
    
  b.position.x = newpx
  b.position.y = newpy
  b.position.z = newpz
  b.width = newW
  b.height = newH
  b.texture = newtx
  
label = (xx, yy, zz, length, width = 0.3) ->
  return k =
    section_segments: [-90,90]
    offset:
      x: 0
      y: yy-width
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: addArray([0,length],xx)
      z: [0,0,0,0,0,0,0,0,0]
    width: [width,width]
    height: [0,0,0,0]
    texture: [0.7]
    angle: 90
    
pipeBottom = (xx, yy, zz) ->
  return k =
    section_segments: 8
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,-4,-10,0,0,0,0,0,0,0,0]
      y: [-15,-8,-5,0]
      z: [0,0,0,0,0,0,0,0,0,0,0]
    width: [3,3,6,3]
    height: [3,3,3,3]
    texture: [3]
    angle: 180
    vertical: true
    
cockpitPod = (xx, yy, zz, ang) ->
  return k = 
    section_segments: 8
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [0,3,3,4,4,4.5,4.5]
      z: [0,0,0,0,0,0,0,0,0]
    width: [2,2,1.8,1.4,1.6,1,0]
    height: [2,2,1.8,1.4,1.6,1,0]
    texture: [1,1,17,1,1] 
    vertical: true
    angle: ang
      
yeet = 0

parabolicDish = (xx, yy, zz, angle, tx, stepAmount, step, stepunit, showfocus = false) ->
  
  if(showfocus)
    yeet = 
      section_segments: 4
      offset:
        x: xx
        y: yy-(1/(4*(1/stepunit)*(1/stepunit)))
        z: zz
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-1,0,1]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,1,0]
      height: [0,1,0]
      texture: [17] 
  
  rad = []
  ypos = []
  
  for i in [0..stepAmount-1]
    ypos.push(-(step/stepunit*i)*(step/stepunit*i))
    rad.push(step*i)
  
  lastypos = ypos[ypos.length-1]
  
  for i in [stepAmount-1..0]
    ypos.push((ypos[i]-lastypos)*1.1+ypos[i])
    rad.push(rad[i]*1.1)
  
  return k = 
    section_segments: 16
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: multiplyArray(ypos,0)
      y: ypos
      z: multiplyArray(ypos,0)
    width: rad
    height: rad
    texture: tx
    angle: angle
    
thrustCircle = (xx, yy, zz) ->
  return k =
    section_segments: [80,90,100,80+180,90+180,100+180]
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-2,-2,2,2]
      z: [0,0,0,0,0,0,0,0,0]
    width: multiplyArray([0,3,3,0],zz/14)
    height: multiplyArray([0,3,3,0],zz/14)
    texture: [2.5]

thrustCircleStruct = (xx, yy, zz) ->
  return k =
    section_segments: addArray(segments(8),22.5)
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0,0,0,0]
      y: [-2,-4,-4,-2,2,4,4,2,-2]
      z: [0,0,0,0,0,0,0,0,0,0,0,0]
    width: [15,16,18,19,19,18,16,15,15]
    height: [15,16,18,19,19,18,16,15,15]
    texture: [63] 

sphere = (xx, yy, zz, step, length, radius, tx, segments = 16, startAt = 0, endAfter = -1) ->
  
  rad = []
  ypos = []
  
  if(endAfter<0)
    endAfter = (length/step)+1
  
  flip = length<0
  if(length<0) 
    length = -length
  i = 0
  for ycurrent in [0..length] by step
    i++
    if(i<startAt||i>endAfter)
      continue
    ypos.push((if flip then -1 else 1)*ycurrent)
    xpos = (ycurrent-length/2)*2/length
    rad.push(Math.sqrt(1-xpos*xpos)*radius)
  
  return k = 
    section_segments: segments
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: fillArray(0,ypos.length)
      y: ypos
      z: fillArray(0,ypos.length)
    width: rad
    height: rad
    texture: tx 

pipesFront = (offx) ->
  return k =
    section_segments: 6
    offset:
      x: 0
      y: 0
      z: 0
    position:
      x: addArray([0,0,0,0,0,0,0,0],offx)
      y: addArray([-10,-5,0,5,15],-50)
      z: [-15,-5,-1,0,0,0,0,0,0]
    width: [3,3,3,3,3]
    height: [3,3,3,3,3]
    texture: [63] 
    vertical: true
    angle: 0
###
"lasers":[
{"x":1.072,"y":-1.76,"z":0.048,"angle":0,"damage":[12,12],
"rate":6,"type":1,"speed":[50,50],"number":2,"spread":0,"error":0.5,"recoil":0},
{"x":-1.072,"y":-1.76,"z":0.048,"angle":0,"damage":[12,12],
"rate":6,"type":1,"speed":[50,50],"number":2,"spread":0,"error":0.5,"recoil":0}]
###

###'"specs":{"shield":{"capacity":[350,350],"reload":[2,2]},
"generator":{"capacity":[750,750],"reload":[30,30]},
"ship":{"mass":130,"speed":[150,150],"rotation":[70,70],"acceleration":[100,100]}},
###


addArray = (arr, m) ->
  k = [];
  for i in [0..arr.length-1]
    k.push(arr[i]+m)
  return k;
 
rotateVector = (x, y, ang) ->
  cs = Math.cos(ang)
  sn = Math.sin(ang)
  px = x * cs - y * sn;
  py = x * sn + y * cs;
  return k =
    x: px
    y: py
 
duplicateBody = (name, newName) ->
  if(newName==undefined)
    newName = name+"duplicate"
  b = model.bodies[name]
  model.bodies[newName] =
    section_segments: b.section_segments
    offset:
      x: b.offset.x
      y: b.offset.y
      z: b.offset.z
    position:
      x: b.position.x.slice(0)
      y: b.position.y.slice(0)
      z: b.position.z.slice(0)
    width: b.width.slice(0)
    height: b.height.slice(0)
    texture: b.texture.slice(0)
  n = model.bodies[newName]
  if(b.angle!=undefined)
    n.angle = b.angle
  if(b.propeller!=undefined)
    n.propeller = b.propeller
  if(b.vertical!=undefined)
    n.vertical = b.vertical
  return n
 
placeBodyAt = (name, x, y) ->
  b = model.bodies[name]
  if(b.angle!=undefined)
    ang = 360-b.angle
  else ang = 0
  ang *= 0.0174533
  pos = rotateVector(x, y, -ang)
 
  b.offset.x = 0
  b.offset.y = 0
  #b.offset.z = 0
 
  b.position.x = addArray(b.position.x, pos.x)
  b.position.y = addArray(b.position.y, pos.y)

savePrerendered = (model,name = "main") ->
  if(window.shipeditortools==undefined)
    window.shipeditortools = {}
  if(window.shipeditortools.prerenders==undefined)
    window.shipeditortools.prerenders = {}
  window.shipeditortools.prerenders[name] = model

hasPrerendered = (name) ->
  if((window.shipeditortools==undefined)||
  (window.shipeditortools.prerenders==undefined)||
  (window.shipeditortools.prerenders[name]==undefined))
    return false;
  return true;

loadPrerendered = (name) ->
  return JSON.parse(JSON.stringify(window.shipeditortools.prerenders[name]))
  
#$project = Ship Hangar
  
prerenderedParts = []

#basic structure
if(true||!hasPrerendered("part1"))
  model =
    name: 'ur face'
    level: 6
    model: 26
    size: 1.2
    specs:
      shield:
        capacity: [120,100]
        reload: [1,1]
      generator:
        capacity: [100,60]
        reload: [20,100]
      ship:
        mass: 100
        speed: [150,150]
        rotation: [60,60]
        acceleration: [180,100]
    bodies: 
      frontBottom:
        section_segments: addArray(segments(2),90)
        offset:
          x: 0
          y: 170
          z: 5
        position:
          x: [0,5,-5,0,0,0,0,0]
          y: [0,50,60,150]
          z: [0,0,13,13,0,0,0,0,0]
        width: [80,85,75,80]
        height: [1,1,1,1]
        texture: [0.6,0.6,0.6] 
        angle: 90
      frontBottomConnectMiddleSlabs:
        section_segments: addArray(segments(6),360/12)
        offset:
          x: 0
          y: 55
          z: 0
        position:
          x: [0,0,0,0,0,0,0,0]
          y: [52,65,80,90]
          z: [0,0,0,0,0,0,0,0,0]
        width: [10,10,10,10]
        height: [0.1,30,30,0.1]
        texture: [3.8] 
        angle: -55
      doorSide:
        section_segments: addArray(segments(6),360/12)
        offset:
          x: 0
          y: 40
          z: -240
        position:
          x: addArray([-10,0,0,-10,0,0,0,0],60)
          y: [-35,-20,60,75,75]
          z: [0,0,0,0,0,0,0,0,0]
        width: [10,10,10,10,0]
        height: [5,5,5,5,0]
        texture: [63] 
        vertical: true
      doorBottom:
        section_segments: 6
        offset:
          x: 0
          y: 240
          z: 5
        position:
          x: [0,0,0,0,0,0,0,0]
          y: [0,40,60]
          z: [0,0,0,0,0,0,0,0,0]
        width: [5,5,5,0]
        height: [10,10,20,0]
        texture: [63] 
        angle: 90
      doorTop:
        section_segments: 6
        offset:
          x: 0
          y: 240
          z: 115
        position:
          x: [0,0,0,0,0,0,0,0]
          y: [0,50,60]
          z: [0,0,-15,0,0,0,0,0,0]
        width: [5,5,5]
        height: [10,10,10]
        texture: [63] 
        angle: 90
      doorWallTopFlat:
        section_segments: 2
        offset:
          x: 0
          y: 240
          z: 122
        position:
          x: [0,0,0,0,0,0,0,0]
          y: [-80,80]
          z: [0,0,0,0,0,0,0,0,0]
        width: [10,10]
        height: [15,15]
        texture: [0.6] 
        angle: 90
      
  duplicateAndMirror = (name) ->
    v = duplicateBody(name)
    v.angle *= -1
    v.position.x = multiplyArray(v.position.x,-1)
  
  duplicateAndMirror("frontBottom")
  duplicateAndMirror("frontBottomConnectMiddleSlabs")
  duplicateAndMirror("doorSide")
  duplicateAndMirror("doorBottom")
  duplicateAndMirror("doorTop")
      
  wallType1 = (length, angle, offset, floorStep, xshift = 0) ->
    return k =
      section_segments: addArray(segments(2),90)
      offset:
        x: 0
        y: 0
        z: 17
      position:
        x: addArray([0,0,0,0,0,0,0,0],xshift)
        y: addArray([-floorStep,5,10,10,5,],offset)
        z: [0,0,5,120,125,125,0,0,0,0]
      width: multiplyArray([1,1,1,1,1,1],length)
      height: [2,2,2,2,2,2]
      texture: [0.6,0.6]
      angle: angle
      
  model.bodies.wallLeft = wallType1(130,90,140,25,-10)
  model.bodies.wallBackLeft = wallType1(80,-180-35,160,45,-20)
  model.bodies.wallFrontLeft = wallType1(80,65,180,25,-100)
  
  model.bodies.wallBack = wallType1(70,180,160,45)
  
  model.bodies.wallRight = wallType1(130,-90,140,25,10)
  model.bodies.wallBackRight = wallType1(80,180+35,160,45,20)
  model.bodies.wallFrontRight = wallType1(80,-65,180,25,100)
  
  model.bodies.wallFrontPartLeft = wallType1(20,0,230,45,80)
  model.bodies.wallFrontPartRight = wallType1(20,0,230,45,-80)
  
  circleEfficientFlat("bottomCirc", 0, 0, 0, 16, 
    [0.01,10,12,40,45,46,48,49,55,56,58,59,70,80,100], 
    [-2,-2,0,0,0,-1,-2,-3,-3,-2,-1,0,0,5,5,0], 
    [0.6,0.6,10.65,63,3.6,16.6,3.6,3.6,3.6,16.6,3.6,0.6])
  circleEfficientFlat("bottomCircOuter", 0, 0, 0, 6, 
    [80,90,90,92,95,95,100,100,150], 
    [0,10,15,17,17,15,15,17,17,0], 
    [2.6,2.6,2.6,2.6,3.6,16.6,3.6,0.6],1
    [0,1,1,1,1,1])
  #bodyStar("bottom",8)
  
      
  
  savePrerendered(model.bodies,"part1")    
prerenderedParts.push(loadPrerendered("part1"))

model =
  name: 'ur face'
  level: 6
  model: 26
  size: 1.2
  specs:
    shield:
      capacity: [120,100]
      reload: [1,1]
    generator:
      capacity: [100,60]
      reload: [20,100]
    ship:
      mass: 100
      speed: [150,150]
      rotation: [60,60]
      acceleration: [180,100]
      
model.bodies = Object.assign.apply(null, [{}].concat(prerenderedParts))

if(1)
    xx = 0
    yy = -70
    zz = 20
    for k,v of model.bodies
      if(v.vertical)
        placeBodyAt(k,xx,zz+v.offset.y)
        v.offset.z += -yy
        v.offset.x = 0
        v.offset.y = 0
      else
        placeBodyAt(k,xx,yy+v.offset.y)
        v.offset.x = 0
        v.offset.y = 0
        v.offset.z += zz

pend = performance.now()
#alert(pend-pstart+"ms")

return model;