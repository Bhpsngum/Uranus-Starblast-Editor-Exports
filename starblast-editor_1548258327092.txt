anim = 0;

rotateAroundZ = (name, oname, a, rotatePart, isWing=false) ->
  o = model.bodies[oname];
  
  if(isWing)
    part = model.wings[name];
  else
    part = model.bodies[name];
    
  ox = o.offset.x;
  oy = o.offset.y;
  
  dx = part.offset.x-ox;
  dy = part.offset.y-oy;
  
  ra = -a*0.0174533;
  
  ndx = dx*Math.cos(ra) - dy*Math.sin(ra);
  ndy = dx*Math.sin(ra) + dy*Math.cos(ra);
  
  part.offset.x = ndx+ox;
  part.offset.y = ndy+oy;
  
  if(rotatePart&&!isWing)
    part.angle+=a
    
anchorToPart = (name, oname, xx, yy, zz, isWing=false, oisWing) ->
    if(oisWing)
      o = model.wings[oname];
    else
      o = model.bodies[oname];
    
    if(isWing)
      part = model.wings[name];
    else
      part = model.bodies[name];
      
    part.offset.x = o.offset.x+xx;
    part.offset.y = o.offset.y+yy;
    part.offset.z = o.offset.z+zz;
  

multiplyArrays = (arr, m) ->
  k = [];
  for i in [0..arr.length-1]
    k.push(arr[i]*m[i])
  return k;

addArrays = (arr, m, mult=1) ->
  k = [];
  for i in [0..arr.length-1]
    k.push(arr[i]+m[i]*mult)
  return k;
  
multiplyArray = (arr, m) ->
  k = [];
  for i in [0..arr.length-1]
    k.push(arr[i]*m)
  return k;

addArray = (arr, m) ->
  k = [];
  for i in [0..arr.length-1]
    k.push(arr[i]+m)
  return k;
  
fillArray = (what, length) ->
  k = [];
  for i in [0..length-1]
    k.push(what)
  return k;
  
fillArrayAlternate = (options, sequence) ->
  k = [];
  currentOption = 0;
  for i in [0..sequence.length-1]
    for j in [0..sequence[i]]
      k.push(options[currentOption])
    currentOption++
    if(currentOption>=options.length)
      currentOption = 0
  return k;
  
segments = (num) ->
  k = [];
  for i in [0..num-1]
    k.push((360/num)*i)
  return k;

circle = (id, xx, yy, zz, segments, radPosY, radPosZ, tx, h=1) ->
  widths = [];
  heights = [];
  posx = [];
  m = model;
  for i in [0..radPosY.length]
    posx.push(0);
    heights.push(h);
    widths.push(radPosY[i]*Math.tan(Math.PI/segments))
  for i in [0..segments] by 1
    m.bodies[id+"segment"+i] = 
      section_segments: 4
      offset:
        x: xx
        y: yy
        z: zz
      position:
        x: posx
        y: radPosY
        z: radPosZ
      width: widths
      height: heights
      angle: 360*(i/segments)
      texture: tx
  
wingFixedBumps = (xx, yy, zz, lengths, widths, angles, positions, tx, bumpPos, bumpS, toler) ->
  anew = [];
  l = [];
  w = [];
  p = [];
  for i in [0..angles.length-1]
    anew.push(angles[i])
    l.push(lengths[i])
    w.push(widths[i])
    p.push(positions[i])
    if(i==angles.length-1)
      break;
    if(Math.abs(angles[i]-angles[i+1])>toler)
      anew.push(angles[i])
      l.push(0)
      w.push(widths[i+1])
      p.push(positions[i+1])
  
  l.unshift(0)
  w.unshift(0)
  p.unshift(positions[0])
  anew.unshift(anew[0])
  
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  
  l.push(0)
  w.push(widths[widths.length-1])
  p.push(positions[positions.length-1])
  anew.push(anew[anew.length-1])
  
  return k = 
    doubleside: true
    offset:
      x: xx
      y: yy
      z: zz
    length: l
    width: w
    angle: anew
    position: p
    texture: tx
    bump:
      position: bumpPos
      size: bumpS

squareBody = (id, xx, yy, zz, w, h, posx, posy, posz, txtop, txsides, txbottom, bump, a=0, sbumpMult=1, doubleSides=false) ->
  flatw = [];
  flath = [];
  for i in [0..w.length]
    flatw.push(bump*sbumpMult)
    flath.push(bump)
  
  xoff = 0.01
  if(a!=0) 
    xoff = 0
  
  sides = 
    section_segments: 4
    offset:
      x: xx+xoff
      y: yy
      z: zz
    position:
      x: addArrays(posx,w,1)
      y: posy
      z: posz
    width: flatw
    height: h
    texture: txsides
    angle: a
  top = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h)
    width: w
    height: flath
    texture: txtop
    angle: a
  bottom = 
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: posx
      y: posy
      z: addArrays(posz,h,-1)
    width: w
    height: flath
    texture: txbottom
    angle: a
  if(doubleSides)
    dsides = 
      section_segments: 4
      offset:
        x: xx+xoff
        y: yy
        z: zz
      position:
        x: multiplyArray(addArrays(posx,w,-1), 1)
        y: posy
        z: posz
      width: flatw
      height: h
      texture: txsides
      angle: a
    model.bodies[id+"dsides"] = dsides;
    
  model.bodies[id+"t"] = top;
  model.bodies[id+"b"] = bottom;
  model.bodies[id+"sides"] = sides;
  
bodyStarY = (name, number, aroundX, aroundY, aoffset = 0, offx = 0, spawn) ->
  b = model.bodies[name]
  
  delete model.bodies[name]
  
  for i in [0..(number-1)] by 1
    
    if(spawn!=undefined&&!spawn[i])
      continue
    
    if(i == 0)
      n = name
    else
      n = name+"star"+i
    nposx = [];
    nposz = [];
    
    ang = (i*360/number)+aoffset
    a = ang
    ang = ang*0.0174533

    for j in [0..b.position.x.length-1] by 1
      if(j>=b.position.z.length)
        break;
      ox = b.position.x[j]
      oz = b.position.z[j]
      nposx.push(ox*Math.cos(ang)-oz*Math.sin(ang))
      nposz.push(ox*Math.sin(ang)+oz*Math.cos(ang))
    
    ox = b.offset.x-aroundX
    oz = b.offset.z-aroundY
    
    segments = b.section_segments
    
    if(segments.length != undefined)
      segments = addArray(segments,a)
    
    model.bodies[n] =
      section_segments: segments
      offset:
        x: 0
        y: b.offset.y
        z: aroundY+ox*Math.sin(ang)+oz*Math.cos(ang)+aroundY
      position:
        x: addArray(nposx,ox*Math.cos(ang)-oz*Math.sin(ang)+aroundX+offx)
        y: b.position.y.slice(0)
        z: addArray(nposz,0)
      width: b.width.slice(0)
      height: b.height.slice(0)
      texture: b.texture.slice(0)
      angle: 0
      propeller: b.propeller
      vertical: b.vertical
  
bodyStar = (name, number) ->
  b = model.bodies[name]
  for i in [0..number-1] by 1
    if(i == 0)
      n = name
    else
      n = name+"star"+i
    model.bodies[n] =
      section_segments: b.section_segments
      offset:
        x: b.offset.x
        y: b.offset.y
        z: b.offset.z
      position:
        x: b.position.x.slice(0)
        y: b.position.y.slice(0)
        z: b.position.z.slice(0)
      width: b.width.slice(0)
      height: b.height.slice(0)
      texture: b.texture.slice(0)
      angle: b.angle+(i*360/number)
      vertical: b.vertical
      
shieldPiece = (xx, yy, zz, t=1) ->
  return k =
    section_segments: 4
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-10,-10,-5,-5,0,0,35]
      z: multiplyArray([0,0,2,2,4,4,60,0,0],t)
    width: [0,20,20,5,5,35,25]
    height: [0,5,5,3,3,3,0]
    texture: [3,3+14*glRet,3,4,3,63]
    angle: 0
    
mapToRange = (v, min, max) ->
  if(v<min)
    return 0
  if(v>max)
    return 1
  return (v-min)/(max-min)

duplicateBody = (name, newName) ->
  if(newName==undefined)
    newName = name+"duplicate"
  b = model.bodies[name]
  model.bodies[newName] =
    section_segments: b.section_segments
    offset:
      x: b.offset.x
      y: b.offset.y
      z: b.offset.z
    position:
      x: b.position.x.slice(0)
      y: b.position.y.slice(0)
      z: b.position.z.slice(0)
    width: b.width.slice(0)
    height: b.height.slice(0)
    texture: b.texture.slice(0)
  n = model.bodies[newName]
  if(b.angle!=undefined)
    n.angle = b.angle
  if(b.propeller!=undefined)
    n.propeller = b.propeller
  return n
  
bodyTubeRepeatMirror = (name) ->
  b = model.bodies[name]
  l = b.width.length-1
  newpx = b.position.x.slice(0,l)
  newpy = b.position.y.slice(0,l)
  newpz = b.position.z.slice(0,l)
  newW = b.width.slice(0,l)
  newH = b.height.slice(0,l)
  newtx = b.texture.slice(0,l)
  for i in [l..0]
    newpx.push(b.position.x[i])
    newpy.push(b.position.y[i]*-1)
    newpz.push(b.position.z[i])
    
    newW.push(b.width[i])
    newH.push(b.height[i])
    
  for i in [b.texture.length-1..0]  
    newtx.push(b.texture[i])
    
  b.position.x = newpx
  b.position.y = newpy
  b.position.z = newpz
  b.width = newW
  b.height = newH
  b.texture = newtx
  
label = (xx, yy, zz, length, width = 0.3) ->
  return k =
    section_segments: [-90,90]
    offset:
      x: 0
      y: yy-width
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: addArray([0,length],xx)
      z: [0,0,0,0,0,0,0,0,0]
    width: [width,width]
    height: [0,0,0,0]
    texture: [0.7]
    angle: 90
    
pipeBottom = (xx, yy, zz) ->
  return k =
    section_segments: 8
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,-4,-10,0,0,0,0,0,0,0,0]
      y: [-15,-8,-5,0]
      z: [0,0,0,0,0,0,0,0,0,0,0]
    width: [3,3,6,3]
    height: [3,3,3,3]
    texture: [3]
    angle: 180
    vertical: true
    
cockpitPod = (xx, yy, zz, ang) ->
  return k = 
    section_segments: 8
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [0,3,3,4,4,4.5,4.5]
      z: [0,0,0,0,0,0,0,0,0]
    width: [2,2,1.8,1.4,1.6,1,0]
    height: [2,2,1.8,1.4,1.6,1,0]
    texture: [1,1,17,1,1] 
    vertical: true
    angle: ang
      
yeet = 0

parabolicDish = (xx, yy, zz, angle, tx, stepAmount, step, stepunit, showfocus = false) ->
  
  if(showfocus)
    yeet = 
      section_segments: 4
      offset:
        x: xx
        y: yy-(1/(4*(1/stepunit)*(1/stepunit)))
        z: zz
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-1,0,1]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,1,0]
      height: [0,1,0]
      texture: [17] 
  
  rad = []
  ypos = []
  
  for i in [0..stepAmount-1]
    ypos.push(-(step/stepunit*i)*(step/stepunit*i))
    rad.push(step*i)
  
  lastypos = ypos[ypos.length-1]
  
  for i in [stepAmount-1..0]
    ypos.push((ypos[i]-lastypos)*1.1+ypos[i])
    rad.push(rad[i]*1.1)
  
  return k = 
    section_segments: 16
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: multiplyArray(ypos,0)
      y: ypos
      z: multiplyArray(ypos,0)
    width: rad
    height: rad
    texture: tx
    angle: angle
    
thrustCircle = (xx, yy, zz) ->
  return k =
    section_segments: [80,90,100,80+180,90+180,100+180]
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0]
      y: [-2,-2,2,2]
      z: [0,0,0,0,0,0,0,0,0]
    width: multiplyArray([0,3,3,0],zz/14)
    height: multiplyArray([0,3,3,0],zz/14)
    texture: [2.5]

thrustCircleStruct = (xx, yy, zz) ->
  return k =
    section_segments: addArray(segments(8),22.5)
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: [0,0,0,0,0,0,0,0,0,0,0]
      y: [-2,-4,-4,-2,2,4,4,2,-2]
      z: [0,0,0,0,0,0,0,0,0,0,0,0]
    width: [15,16,18,19,19,18,16,15,15]
    height: [15,16,18,19,19,18,16,15,15]
    texture: [63] 

sphere = (xx, yy, zz, step, length, radius, tx, segments = 16, startAt = 0, endAfter = -1) ->
  
  rad = []
  ypos = []
  
  if(endAfter<0)
    endAfter = (length/step)+1
  
  flip = length<0
  if(length<0) 
    length = -length
  i = 0
  for ycurrent in [0..length] by step
    i++
    if(i<startAt||i>endAfter)
      continue
    ypos.push((if flip then -1 else 1)*ycurrent)
    xpos = (ycurrent-length/2)*2/length
    rad.push(Math.sqrt(1-xpos*xpos)*radius)
  
  return k = 
    section_segments: segments
    offset:
      x: xx
      y: yy
      z: zz
    position:
      x: fillArray(0,ypos.length)
      y: ypos
      z: fillArray(0,ypos.length)
    width: rad
    height: rad
    texture: tx 

pipesFront = (offx) ->
  return k =
    section_segments: 6
    offset:
      x: 0
      y: 0
      z: 0
    position:
      x: addArray([0,0,0,0,0,0,0,0],offx)
      y: addArray([-10,-5,0,5,15],-50)
      z: [-15,-5,-1,0,0,0,0,0,0]
    width: [3,3,3,3,3]
    height: [3,3,3,3,3]
    texture: [63] 
    vertical: true
    angle: 0
###
"lasers":[
{"x":1.072,"y":-1.76,"z":0.048,"angle":0,"damage":[12,12],
"rate":6,"type":1,"speed":[50,50],"number":2,"spread":0,"error":0.5,"recoil":0},
{"x":-1.072,"y":-1.76,"z":0.048,"angle":0,"damage":[12,12],
"rate":6,"type":1,"speed":[50,50],"number":2,"spread":0,"error":0.5,"recoil":0}]
###

###'"specs":{"shield":{"capacity":[350,350],"reload":[2,2]},
"generator":{"capacity":[750,750],"reload":[30,30]},
"ship":{"mass":130,"speed":[150,150],"rotation":[70,70],"acceleration":[100,100]}},
###

model =
  name: 'Cupola-defender'
  level: 6
  model: 17
  size: 1
  specs:
    shield:
      capacity: [450,100]
      reload: [5,5]
    generator:
      capacity: [150,60]
      reload: [80,100]
    ship:
      mass: 170
      speed: [150,150]
      rotation: [70,60]
      acceleration: [70,100]
  bodies:
    front:
      sphere(0,-15,0,3,60,50,[1,1,18,4],32,2,8)
    mainTop:
      sphere(0,0,0,5,40,70,[1,63,4,4,63,1],32,2,8)
    mainBottom:
      sphere(0,30,0,5,40,70,[1,63,4,4,63,1],32,2,8)
    blaster:
      sphere(0,0,0,4,-40,25,[17,18,4,17],32,0,5)
    blasterFlow:
      section_segments: 8
      offset:
        x: 0
        y: 0
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-10,-17,-15,30]
        z: [0,0,0,0,0,0,0,0,0]
      width: [25,25,28,50]
      height: [25,25,28,50]
      texture: [4,63,1] 
      
    reactorPod:
      section_segments: 8
      offset:
        x: 0
        y: -2+anim*7
        z: 50
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-4,-4,-2,-2,5,5,10]
        z: [0,0,0,0,0,0,0,]
      width: [0,4,5,4,4]
      height: [0,4,5,4,4]
      texture: [18,4,3,17,4] 
    reactorPodInsertInto:
      section_segments: 8
      offset:
        x: 0
        y: -2
        z: 50
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [5,5,10]
        z: [0,0,0,0,0,0,0,]
      width: [0,5,5]
      height: [0,5,5]
      texture: [4]
    reactorPodPad:
      section_segments: addArray([35,45,90-35,180+20,180+45,180+90-20],-45)
      offset:
        x: 0
        y: 14
        z: 25
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-10,-10,10,30]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,32,30,0]
      height: [0,32,30,0]
      texture: [0.6] 
      
    middle:
      section_segments: 16
      offset:
        x: 0
        y: 35
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-10,0,10]
        z: [0,0,0,0,0,0,0,0,0]
      width: [57,60,57]
      height: [57,60,57]
      texture: [18] 
      
    middleBoxes:
      section_segments: addArray(segments(6),360/12)
      offset:
        x: 0
        y: 35
        z: 66
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-15,-4,-3,3,4,15]
        z: [0,0,0,0,0,0,0,0,0]
      width: [3,3,5,5,3,3]
      height: [4,4,6,6,4,4]
      texture: [3.8,3.8,10.35,3.8] 
      
    sideHecks:
      section_segments: 6
      offset:
        x: 0
        y: 0
        z: -35
      position:
        x: [0,0,0,0,0,0,0,0]
        y: addArray([-3,-1,0,0,-3],-68)
        z: [0,0,0,0,0,0,0,0,0]
      width: [20,25,25,20,20]
      height: [12,17,17,12,12]
      texture: [0.8] 
      vertical: true
      angle: 360/16
      
    healingBalls:
      sphere(0,27.5,70+anim*10,1,15,7.5,[8+(17-8)*Math.floor(anim)],16,0,-1)
    healingBallHolders:
      section_segments: 16
      offset:
        x: 0
        y: 0
        z: -35
      position:
        x: [0,0,0,0,0,0,0,0]
        y: addArray([-3,-1,2,20,2,-3],-70)
        z: [0,0,0,0,0,0,0,0,0]
      width: [8,9,12,12,7,8]
      height: [8,9,9,9,7,8]
      texture: [18,1,1,1,13] 
      vertical: true
      angle: 360/16
      
    pipesMiddle1:
      section_segments: 6
      offset:
        x: 0
        y: 35
        z: 65
      position:
        x: addArray([0,0,2,2,0,0,0,0],-5)
        y: [-15,-7,-5,5,7,15]
        z: [-5,0,0,0,0,-5,0,0,0]
      width: [2,2,2,2,2,2]
      height: [2,2,2,2,2,2]
      texture: [63] 
    pipesMiddle2:
      section_segments: 6
      offset:
        x: 0
        y: 35
        z: 67
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-15,-7,-5,5,7,15]
        z: [-5,0,2,2,0,-5,0,0,0]
      width: [2,2,2,2,2,2]
      height: [2,2,2,2,2,2]
      texture: [63] 
    pipesMiddle3:
      section_segments: 6
      offset:
        x: 0
        y: 35
        z: 65
      position:
        x: addArray([0,0,-2,-2,0,0,0,0],5)
        y: [-15,-7,-5,5,7,15]
        z: [-5,0,0,0,0,-5,0,0,0]
      width: [2,2,2,2,2,2]
      height: [2,2,2,2,2,2]
      texture: [63] 
    
    pipesFront1:
      pipesFront(6)
    pipesFront2:
      pipesFront(0)
    pipesFront3:
      pipesFront(-6)
    
    back:
      section_segments: 16
      offset:
        x: 0
        y: 70
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        y: [-20,-5,3,3,20,21,28,28,30,30,35,35]
        z: [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      width: [60,60,45,38,38,36,30,32,30,22,20,0]
      height: [60,60,45,38,38,36,30,32,30,22,20,0]
      texture: [3,3,3,1,1,9,1,63,63,8,11] 
    backBoxes:
      section_segments: addArray(segments(4),360/8)
      offset:
        x: 0
        y: 0
        z: -79
      position:
        x: [0,0,0,0,0,0,0,0]
        y: addArray([-3,1,2,2],38)
        z: [0,0,0,0,0,0,0,0,0]
      width: [8,6,6,0]
      height: [15,4,4,0]
      texture: [1,17,17.9] 
      vertical: true
      angle: 360/32
    dockportStructConnect:
      section_segments: 16
      offset:
        x: 0
        y: 105
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-5,5]
        z: [0,0,0,0,0,0,0,0,0]
      width: [17,17]
      height: [17,17]
      texture: [12] 
    dockportStructure:
      section_segments: addArray(segments(6),360/12)
      offset:
        x: 0
        y: 125
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [-20,-18,-5,0,25,30,35,40]
        z: [0,0,0,0,0,0,0,0,0]
      width: [0,22,22,25,25,22,22,0]
      height: [0,22,22,25,25,22,22,0]
      texture: [0.8] 
    dockPort:
      section_segments: 16
      offset:
        x: 0
        y: 160
        z: 0
      position:
        x: [0,0,0,0,0,0,0,0]
        y: [0,5,10,30]
        z: [0,0,0,0,0,0,0,0,0]
      width: [18,18,10,0]
      height: [18,18,10,0]
      texture: [1,63,4] 
      

bodyStarY("reactorPod", 8, 0, 0, 22.5)
bodyStarY("reactorPodInsertInto", 8, 0, 0, 22.5)
bodyStarY("reactorPodPad", 8, 0, 0, 22.5)

bodyStarY("middleBoxes", 16, 0, 0, 360/32)
bodyStarY("healingBalls", 8, 0, 0, 360/16)

bodyStarY("pipesMiddle1", 8, 0, 0)
bodyStarY("pipesMiddle2", 8, 0, 0)
bodyStarY("pipesMiddle3", 8, 0, 0)
  
bodyStar("pipesFront1",8)
bodyStar("pipesFront2",8)
bodyStar("pipesFront3",8)

bodyStar("backBoxes",16)

bodyStar("sideHecks",8)
bodyStar("healingBallHolders",8)

for i in [0..3]
  for j in [0..5]
    offs = Math.PI/2+Math.PI/8
    model.bodies["healingBall"+i+"blob"+j] = 
      section_segments: 4
      offset:
        x: (70+anim*10)*Math.cos(Math.PI*2*(i/8)+offs)
        y: (70+anim*10)*Math.sin(Math.PI*2*(i/8)+offs)
        z: -35
      position:
        x: [0,0,0,0,0,0,0,0]
        y: multiplyArray([10,25,30,35],anim)
        z: [0,0,0,0,0,0,0,0,0]
      width: multiplyArray([0,1,2,0],anim)
      height: multiplyArray([0,1,2,0],anim)
      texture: [17] 
      vertical: true
      angle: 140*(j/5)-70-(i/8)*360-22.5

offy = -70;
for k,v of model.bodies 
  if(v.vertical)
    v.offset.z += -offy;
  else
    v.offset.y += offy;
    
for k,v of model.wings 
  v.offset.y += offy;

if(anim)
  for k,v of model.bodies 
    if(v.vertical)
      v.vertical = false
      v.offset.x = -v.offset.x
      if(v.angle==undefined)
          v.angle = 0
        else v.angle += -180
    
    else 
      v.vertical = true
      v.propeller = false
      if(v.angle==undefined)
          v.angle = 180
        else v.angle += 180
    v.offset.y *= -1

model.bodies["xAxis"] = 
  section_segments: 4
  offset:
    x: 0
    y: 0
    z: 0
  position:
    x: [0,0,0,0,0,0,0,0]
    y: [0,1000]
    z: [0,0,0,0,0,0,0,0,0]
  width: [0,3,3,0]
  height: [0,3,3,0]
  texture: [63] 
  angle:90
model.bodies["yAxis"] = 
  section_segments: 4
  offset:
    x: 0
    y: 0
    z: 0
  position:
    x: [0,0,0,0,0,0,0,0]
    y: [0,1000]
    z: [0,0,0,0,0,0,0,0,0]
  width: [0,3,3,0]
  height: [0,3,3,0]
  texture: [1] 
model.bodies["zAxis"] = 
  section_segments: 4
  offset:
    x: 0
    y: 0
    z: 0
  position:
    x: [0,0,0,0,0,0,0,0]
    y: [0,1000]
    z: [0,0,0,0,0,0,0,0,0]
  width: [0,3,3,0]
  height: [0,3,3,0]
  texture: [6]
  vertical:true  

return model;